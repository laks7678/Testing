##List of Parameters



#=============================================================================================
# Title             :     Temporary Table insert
#
# Filename          :     bteq_LZ_PRCS1_XTRCT_LOAD.sh
#
# Version No.       :     1.0
#
# Description       :     This script invokes bteq script to insert the record in PRCS1_XTRCT table.
# 
# Source Tables     :     LZ_ESI_CLM_MSTR, LZ_ESI_PHRMCY, RX_MSTR, FDB_SMARTKEY, FDB_NDC
#
# Target Tables     :     PRCS1_XTRCT
#
# Key Columns       :     None
#
# Developer         :    SURENDRA REDDY  
#
# 
#
# Location          :     $CODE/esi/scripts
#
# Logic             :     The parameters are given in the parameter file.The BTEQ script gets those values from parameter file and
#                         execute the script to insert the load log key in the $DB_ETL_VIEWS_ESI.$TGT_LOAD_LOG table.
#
# Parameters        :     SOR_CD,SUBJ_AREA_NM,TGT_LOAD_LOG,HOST,RUN_ENV,LOGON_DIR,LOGON_ID,DB_NAME
#
#============================================================================================



#===============================================================================
#BTEQ Script
#===============================================================================

bteq <<EOF


--==============================================================================
-- put BTEQ in Transaction mode
--==============================================================================
.SET WIDTH 2000;


--==============================================================================
/* Extract username and password                                              */
--==============================================================================
.run file $LOGON/$LOGON_ID

--========================== Error Handling=====================================
.IF ERRORCODE <> 0 THEN .GOTO ERRORS
--========================== Error Handling=====================================

--==============================================================================
/* Print the name of the user executing the script                            */
--==============================================================================
SELECT SESSION;
SET QUERY_BAND = 'ApplicationName=bteq_LZ_PRCS1_XTRCT_LOAD.sh;'  FOR SESSION;

SELECT GETQUERYBAND();

--========================== Error Handling=====================================
.IF ERRORCODE <> 0 THEN .GOTO ERRORS
--========================== Error Handling=====================================

--===========================Start Transaction==================================
BT;
--==========================Deleting Records from the table======================
DELETE FROM $DB_ETL_VIEWS_ESI.$PRCS1_NM;
--===========================Start Transaction==================================

--========================== Error Handling=====================================
.IF ERRORCODE <> 0 THEN .GOTO ERRORS
--========================== Error Handling=====================================

--#===============================================================================
--#DML to insert data into temporary table PRCS1_XTRCT
--#===============================================================================

INSERT INTO $DB_ETL_VIEWS_ESI.$PRCS1_NM(
SRC_SYSTM, --1
WPEDW_RECORD_SEQ_NBR, --C-001a
WPEDW_RECORD_SEQ_DT_YYMMDD, --C-001b
WPEDW_SUB_NBR, --C-002
WPEDW_SUB_NBR_20, --C-003
WPEDW_PAT_SEX_CD, --C-004
WPEDW_PAT_REL_CD, --C-005
WPEDW_PAT_BCEN, --C-006
WPEDW_PAT_BIRTH_DT, --C-007
WPEDW_GROUP_NBR, --C-008
WPEDW_SRC_SYS_ELIG, --C-009
WPEDW_SERIAL_NBR, --C-011
WPEDW_PHARM_ID, --C-014
WPEDW_PHARM_STATE, --C-015
WPEDW_PHARM_ZIP, --C-017
WPEDW_DOC_NBR, --C-018
WPEDW_RX_NBR, --C-020
WPEDW_PAID_CENDT, --C-023
WPEDW_FILL_CENDT, --C-024
WPEDW_NDC_NBR11, --C-026b
WPEDW_DRUG_NM, --C-027
WPEDW_THERAP_CLASS_CD, --C-028
WPEDW_DEA_CD, --C-029
WPEDW_BRAND_CD, --C-030
WPEDW_DAW_CD, --C-031
WPEDW_REFILL_CD, --C-032
WPEDW_DISPNSE_QTY, --C-033
WPEDW_DAYS_SUPPLY, --C-034
WPEDW_DISPNSE_UNT, --C-035
WPEDW_PHARM_BILL_AMT, --C-036
WPEDW_PER_UNT_AWP, --C-037
WPEDW_EXTENDED_AWP, --C-038
WPEDW_INGRED_COST, --C-039
WPEDW_DISPNSE_FEE, --C-040
WPEDW_DEDUCT, --C-041
WPEDW_COPAY, --C-042
WPEDW_COINSUR, --C-043
WPEDW_TAX_AMT, --C-045
WPEDW_EXCLUS1_CD, --C-048a
WPEDW_EXCLUS1_AMT, --C-048b
WPEDW_EXCLUS2_CD, --C-048c
WPEDW_EXCLUS2_AMT, --C-048d
WPEDW_EXCLUS3_CD, --C-048e
WPEDW_EXCLUS3_AMT, --C-048f
WPEDW_EXCLUS4_CD, --C-048g
WPEDW_EXCLUS4_AMT, --C-048h
WPEDW_EXCLUS5_CD, --C-048i
WPEDW_EXCLUS5_AMT, --C-048j
WPEDW_EXCLUS6_CD, --C-048k
WPEDW_EXCLUS6_AMT, --C-048l
WPEDW_EXCLUS7_CD, --C-048m
WPEDW_EXCLUS7_AMT, --C-048n
WPEDW_EXCLUS8_CD, --C-048o
WPEDW_EXCLUS8_AMT, --C-048p
WPEDW_EXCLUS9_CD, --C-048q
WPEDW_EXCLUS9_AMT, --C-048r
WPEDW_EXCLUS10_CD, --C-048s
WPEDW_EXCLUS10_AMT, --C-048t
WPEDW_NET_CHECK, --C-049
WPEDW_PROC_CENDT, --C-050
WPEDW_GPI, --C-052
WPEDW_GENERIC_AVAIL, --C-054
WPEDW_DIFF, --C-057
WPEDW_NUM_CLM, --C-058
WPEDW_DEA_PRVDR_ID_QUAL, --C-060
WPEDW_DEA_PRVDR_ID, --C-061
WPEDW_CASE_NAME, --C-062
WPEDW_MBS, --C-064
WPEDW_REGION, --C-067
WPEDW_PRODUCT, --C-071
WPEDW_FUND_TYPE, --C-072
WPEDW_PERIOD, --C-075
WPEDW_STATE, --C-086
WPEDW_ZIP9, --C-087
WPEDW_CLIENT_CDE, --C-088
WPEDW_LOB_CODE, --C-089
WPEDW_NETWORK_CDE, --C-090
WPEDW_FORM_IND, --C-091
WPEDW_MAIL_ORDER_CDE, --C-092
WPEDW_PAR_IND, --C-093
WPEDW_MEM_LNAME, --C-096
WPEDW_MEM_FNAME, --C-097
WPEDW_PMG, --C-106
WPEDW_RX_OTC_IND_CDE, --C-107
WPEDW_REC_CTL_NO, --C-109
WPEDW_PRSP_DTE, --C-110
WPEDW_COB_CD, --C-111
WPEDW_CMPND_PRSP_CD, --C-112
WPEDW_PHAR_NETWK_CD, --C-114
WPEDW_PAT_LAST_NM, --C-116a
WPEDW_PAT_FIRST_NM, --C-116b
WPEDW_PAT_MID_INIT, --C-116c
WPEDW_PAYEE_LAST_NM, --C-117a
WPEDW_PAYEE_FIRST_NM, --C-117c
WPEDW_PAYEE_MID_INIT, --C-117e
WPEDW_PAYE_LINE_1_STR, --C-118a
WPEDW_PAYE_LINE_2_STR, --C-118b
WPEDW_PAYE_CITY, --C-118c
WPEDW_PAYE_ST, --C-118d
WPEDW_PAYEE_ZIP_CD, --C-119
WPEDW_PAY_CHK_NO, --C-120
WPEDW_GRP_DRUG_EFF_DTE, --C-121
WPEDW_LOB_GRP_INFO, --C-129
WPEDW_MAIL_ORD_COPAY_TYP_CD, --C-133
WPEDW_BRAND_COPAY_AMT, --C-134
WPEDW_COPAY_TYP_CD, --C-136
WPEDW_CTL_GRP_NO, --C-166
WPEDW_SUBR_STR, --C-168a
WPEDW_SUBR_CITY, --C-168b
WPEDW_SUBR_STATE, --C-168d
WPEDW_SUBR_ZIP_15, --C-168e
WPEDW_DEP_BRTH_DTE, --C-169
WPEDW_OTHER_CARRIER_PAY_AMT, --C-176
WPEDW_MBR_BEN_LMT_AMT, --C-177
WPEDW_CLM_BEN_AMT, --C-178
WPEDW_CLM_RECEIVE_DTE, --C-181
WPEDW_DRUG_UTL_REVW_TYP_CD, --C-184
WPEDW_PRSP_DRUG_LABEL_NM, --C-186
WPEDW_AHFS_DRUG_THERAP_CD, --C-188
WPEDW_MAC_SCHD_IND, --C-191
WPEDW_DRUG_AWP_AMT, --C-192
WPEDW_MBR_SEX_CD, --C-197
WPEDW_DRUG_PRIOR_APPV_RSN_CD_1, --C-200a
WPEDW_DRUG_PRIOR_APPV_RSN_CD_2, --C-200b
WPEDW_DRUG_PRIOR_APPV_RSN_CD_3, --C-200c
WPEDW_DRUG_PRIOR_APPV_RSN_CD_4, --C-200d
WPEDW_NETWK_CHOSEN_CD, --C-203
WPEDW_DRUG_PRIOR_APPV_CMT_CD, --C-207
WPEDW_DRUG_PRIOR_APPV_CD, --C-208
WPEDW_CHN_PHAR_NO, --C-218
WPEDW_DRUG_CLM_SOURCE_CD, --C-226
WPEDW_PROCESR_BATCH_NO_DTE, --C-235
WPEDW_BATCH_SEQ_NBR, --C-236
WPEDW_CLAIM_FORM_CD, --C-237
WPEDW_CLAIM_DISP_CD, --C-238
WPEDW_ORIG_SUBMIT_GRP_NO, --C-239
WPEDW_ORIG_HOME_PLAN_CD, --C-240
WPEDW_SUB_CLAIM_PHARM_NBR, --C-242
WPEDW_DRUG_ORIG_AMT, --C-243
WPEDW_DRUG_UNIT_CST_AMT, --C-244
WPEDW_HOME_PLAN_CD, --C-245
WPEDW_GEN_DRUG_CD_NO, --C-251
WPEDW_GEN_DRUG_PRODUCT_CD, --C-252
WPEDW_PD_CLM_WARN_CD, --C-254
WPEDW_DRUG_CLM_REJ_OVER_CD, --C-255
WPEDW_CLM_FORCE_REJ_3_CD, --C-256
WPEDW_ORIG_CLM_PAY_DTE, --C-258
WPEDW_SMART_KEY_FIELDS, --C-259
WPEDW_PHARM_TYPE_CD, --C-261
WPEDW_PAT_REL_CD2, --C-262
WPEDW_EXP_GROUP_NBR, --C-264
WPEDW_EXP_GROUP_SECT_NBR, --C-265
WPEDW_CASE_NO, --C-266
WPEDW_CLIENT_RPT5, --C-270
WPEDW_CLIENT_RPT6, --C-271
WPEDW_HEALTH_CARD_ID, --C-272
WPEDW_MBS1, --C-273
WPEDW_COMPANY_CODE, --C-274
WPEDW_MEDICARE_ADMIN_FEE, --C-280
WPEDW_PHAR_CLM_BAL_AMT, --C-282
WPEDW_CLIENT_NETWK_CD, --C-285
WPEDW_OTHER_TROOP_AMT, --C-288
WPEDW_TOTAL_PLRO_AMT, --C-289
WPEDW_LICS_SUBSIDY_AMT, --C-290
WPEDW_LICS_IND, --C-291
WPEDW_GROUP_PRODUCT_IND, --C-292
WPEDW_CONTRACT_NO, --C-293
WPEDW_HICN, --C-294
WPEDW_PBP_ID, --C-295
WPEDW_CATASTROPHIC_COV_CD, --C-296
WPEDW_CLM_TROOP_AMT, --C-298
WPEDW_DRUG_COV_STAT_CD, --C-300
WPEDW_CLM_TOTAL_AMT, --C-303
WPEDW_CLM_CATASTROPHIC_AMT, --C-306
WPEDW_OTHER_CARRIER_PTD_AMT, --C-309
WPEDW_NETWK_DIFF_PTD_AMT, --C-310
WPEDW_PAT_PAY_AMT_EDT, --C-311
WPEDW_GDCA_AMT_EDT, --C-315
WPEDW_PRIC_EXP_CD, --C-316
WPEDW_ORIG_PRSP_NO_QUAL, --C-321a
WPEDW_ORIG_PRSP_NO_9, --C-321b
WPEDW_COB_OTH_PAYER_COV_TYPE, --C-321c
WPEDW_PHAR_MKUP_AMT, --C-321d
WPEDW_PRSP_CARD_GRP_NO_COMB, --C-321e
WPEDW_REASON_CD, --C-321f
WPEDW_SUBR_SALES_TAX_AMT, --C-321g
WPEDW_FLAT_SALES_TAX_SUBMIT, --C-321h
WPEDW_SALES_TAX_RATE, --C-321i
WPEDW_SALES_TAX_BASIS, --C-321j
WPEDW_GRP_DRUG_SUSP_DTE_8, --C-323a
WPEDW_EXPD_DRUG_RIDER_CD, --C-323b
WPEDW_PRSP_REFILL_VAL, --C-323c
WPEDW_DRUG_RSTRC_CD, --C-323d
WPEDW_SBMT_DRUG_INGRED_CST_A, --C-323e
WPEDW_USUAL_AND_CUST_DRUG_A, --C-323f
WPEDW_SUBRPSALE_CLM_MATCHIND, --C-323g
WPEDW_PRSP_CARD_CREATE_DTE_8, --C-324a
WPEDW_PRSP_CARD_EXPIR_DTE_8, --C-324b
WPEDW_SUBR_SPEC_DRUG_COV_IND, --C-324c
WPEDW_SUBR_CONT_EXT_NO, --C-324d
WPEDW_SUBR_SEX_CD, --C-324e
WPEDW_DEP_LAST_NM, --C-324f
WPEDW_DEP_FIRST_NM_EXP, --C-324g
WPEDW_DRUG_GENERIC_NM, --C-324h
WPEDW_DRUG_FORM_TEXT, --C-324i
WPEDW_DRUG_MANUF_DSTRBUTR_NM, --C-324j
WPEDW_DRUG_STD_PKG_SZ_IND, --C-324k
WPEDW_DRUG_UNIT_DOSE_PKG_IND, --C-324l
WPEDW_DRUG_FORM_CD, --C-324m
WPEDW_DRUG_PKG_SZ_QTY, --C-324n
WPEDW_DESI_DRUG_IND, --C-324o
WPEDW_PRIM_CARRIER_CD, --C-324p
WPEDW_DRUG_PRODUCT_OBS_DTE_8, --C-324q
WPEDW_MED_COND_TEXT, --C-324r
WPEDW_TRML_OPER_NO, --C-324s
WPEDW_NEW_ACCUM_LOGIC_FL, --C-324t
WPEDW_BRAND_DISCOUNT_PERCENT, --C-324u
WPEDW_GNRC_DISCOUNT_PERCENT, --C-324v
WPEDW_PHAR_PRIOR_APPV_OVR_CD, --C-324w
WPEDW_PHYS_OUT_NETWORK, --C-324x
WPEDW_HOLD_FROM_PAY_CD, --C-324y
WPEDW_DRUG_CLM_TRANS_CD, --C-324z
WPEDW_PHAR_DISPEN_NM, --C-324aa
WPEDW_PHAR_DISPEN_STR, --C-324ab
WPEDW_PHAR_DISPEN_CITY, --C-324ac
WPEDW_PHAR_DISPEN_STATE, --C-324ad
WPEDW_PHAR_DISPEN_ZIP_CD_15, --C-324ae
WPEDW_PHAR_EFF_DTE_8, --C-324ag
WPEDW_PHAR_DEL_DTE_8, --C-324ah
WPEDW_CENT_CLM_PROCESS_SITCD, --C-324ai
WPEDW_PHAR_PROFES_FEE_IND, --C-324aj
WPEDW_PHAR_FORM_REMB_IND, --C-324ak
WPEDW_PHAR_SPEC_DISPEN_FEE_A, --C-324al
WPEDW_DEP_COPAY_PERCENT, --C-324am
WPEDW_REJ_OVER_RMVL_CD, --C-324an
WPEDW_ORIG_CHK_NO, --C-324ao
WPEDW_DED_PROCESS_SORT_SEQNO, --C-325a
WPEDW_CHN_PHAR_PAYEE_ID_NO, --C-325b
WPEDW_CLM_SUBMIT_CD, --C-325c
WPEDW_DRUG_REC_CORR_IND, --C-325d
WPEDW_DRUG_CLM_PRESORTMAILCD, --C-325e
WPEDW_CLM_SORT_SEQ_NO, --C-325f
WPEDW_CLM_REV_DTE_8, --C-325g
WPEDW_MBR_MED_DED_AMT, --C-326a
WPEDW_PAY_BRAND_PRICE_IND, --C-326b
WPEDW_PLAN_ASGN_PHYS_ID_QUAL, --C-326c
WPEDW_PLAN_ASGN_PHYS_ID_NO, --C-326d
WPEDW_REJ_CLAIMS_ALLOWED_AMT, --C-326e
WPEDW_ORNG_BK_THERAP_CD, --C-326f
WPEDW_ADDL_DCN_OR_MAC_AMT, --C-326g
WPEDW_MBR_MED_BEN_LMT_AMT, --C-326i
WPEDW_LEASE_LINE_CHARGE_IND, --C-326j
WPEDW_FDB_GNRC_DRUGPRODUCTCD, --C-326k
WPEDW_GENERIC_MANUFACTURERCD, --C-326l
WPEDW_GENERIC_NAME_CD, --C-326m
WPEDW_GENERIC_SPREAD_CD, --C-326n
WPEDW_BATCH_SEQ_ONCORRECTION, --C-326o
WPEDW_IL_FORMULARY_DRUG_CD, --C-326p
WPEDW_BRAND_CMPND_DISP_FEE_A, --C-326q
WPEDW_GNRC_CMPND_DISP_FEE_A, --C-326r
WPEDW_PHYS_LAST_NM, --C-326s
WPEDW_PHYS_FIRST_NM, --C-326t
WPEDW_PA_TYPE_CD, --C-326u
WPEDW_PA_BEGIN_DT, --C-326v
WPEDW_PA_END_DT, --C-326w
WPEDW_PA_INCLUD_EXCLUD_CD, --C-326x
WPEDW_PA_TYPE_FIELD, --C-326y
WPEDW_PA_SCRIPTS_USED, --C-326z
WPEDW_PA_DAYS_USED, --C-326aa
WPEDW_PA_UNITS_USED, --C-326ab
WPEDW_PA_DOLLARS_USED, --C-326ac
WPEDW_PA_USE_CAP, --C-326ad
WPEDW_PA_USE_DED, --C-326ae
WPEDW_PA_USE_OOP, --C-326af
WPEDW_PA_COPAY_TYPE, --C-326ag
WPEDW_PA_COPAY_AMT, --C-326ah
WPEDW_NATL_NETWRK_EXCEPT_CD, --C-326ai
WPEDW_LOCAL_EXCEPT_CD, --C-326aj
WPEDW_BASIS_OF_COST_CD, --C-326ak
WPEDW_AWP_PHAR_AUD_PERCENT_OLD, --C-326al
WPEDW_CHN_PHAR_DISPEN_FEE_A, --C-326am
WPEDW_CHN_GNRC_DISPEN_FEE_A, --C-326an
WPEDW_COPAYTBL_NETWK_TYP, --C-330a
WPEDW_COPAYTBL_COPAY_GRP, --C-330b
WPEDW_COPAYTBL_COPAY_CAT, --C-330c
WPEDW_COPAYTBL_MIN_COPAY, --C-330d
WPEDW_COPAYTBL_MAX_COPAY, --C-330e
WPEDW_COPAYTBL_EXEMPT_LIST, --C-330f
WPEDW_COPAYTBL_DAW_EXEMPT, --C-330g
WPEDW_COPAYTBL_REGR_PCT_IND, --C-330h
WPEDW_COPAYTBL_REGR_PCT, --C-330i
WPEDW_COPAYTBL_PAY_DIFF_IND, --C-330j
WPEDW_WORK_COMP_ICD9_3, --C-333a
WPEDW_WORK_COMP_ICD9_PD, --C-333b
WPEDW_WORK_COMP_ICD9_2, --C-333c
WPEDW_ZERO_BALANCE_COPAY, --C-335a
WPEDW_MAC_ONLY_GEN_DISP_FEE, --C-335b
WPEDW_MAC_ADDL_PERCENT_AMT, --C-335c
WPEDW_MAC_ADDL_PERCENT_PRC, --C-335d
WPEDW_ANY_WILLING_PROV, --C-335e
WPEDW_CONT_SATISFY_BEN_LMT_A, --C-364
WPEDW_PRIM_REJ_CD_1, --C-370a
WPEDW_PRIM_REJ_CD_2, --C-370b
WPEDW_PRIM_REJ_CD_3, --C-370c
WPEDW_CLIENT_FORM_FORMCD, --C-378
WPEDW_DRUG_STRENGTH_TEXT, --C-383
WPEDW_DRUG_CAT_CD, --C-385
WPEDW_CLIENT_FORM_CODE1, --C-404
WPEDW_MBS_CD, --C-413
WPEDW_CONT_COV_CD, --C-421
WPEDW_PRODUCT_ID_CD, --C-429
WPEDW_DEP_BRTH_CC, --C-430
WPEDW_GNRC_BR_VAR_COPAY_AMT, --C-431
WPEDW_DRUG_SOURCE_CD, --C-432
WPEDW_PAT_PAY_AMT, --C-440
WPEDW_CPP_AMT, --C-441
WPEDW_NPP_AMT, --C-442
WPEDW_GDCB_AMT, --C-443
WPEDW_GDCA_AMT, --C-444
WPEDW_OON_CD, --C-445
WPEDT_SPEND_ACCT_APPL_AMT, --C-446
WPEDT_THC_AMT, --C-447
WPEDT_HRA_FUND_TYPE, --C-448
WPEDT_PHARM_NPI_ID, --C-449
WPEDT_PHYS_NPI_ID, --C-450
WPEDT_MEM_SEQ_NBR, --C-451
WPEDT_DED_BEFORE_HRA, --C-452
WPEDW_EXT_PRODUCT, --C-454
WPEDW_MEMBER_MISC, --C-455
WPEDW_GROUP_MISC, --C-456
LOAD_LOG_KEY, --3
GL_BUSINESS_UNIT, --C-457
GL_MBU, --C-458
GL_FUNDING_CODE_THC, --C-459
GL_FUNDING_CODE_CDH, --C-460
GL_PRODUCT, --C-461
GL_LOCATION, --C-462
GL_DETAIL_PRODUCT, --C-463
GL_AMOUNT, --C-464
GL_HRA_AMOUNT, --C-465
GL_STATISTICAL_AMOUNT, --C-466
GL_ACCOUNT_NUMBER, --C-467
GL_AFFILIATE, --C-468
GL_POST_DT, --C-469
ESI_DIV_CD, --C-470
ESI_PLAN_TYPE, --C-471 --ESI Client in Mapping document
GL_ACCNT_NBR_CDH, --C-472
WPEDW_DLY_WKLY_IND, --C-473
WPEDW_AMT_EXCD_PER_BEN_MAX, --C-474
WPEDW_VEND_AUTO_PAY_IND,--C-475
GL_ACCNT_NBR_ADM, --C-476
WPEDW_EXTNDD_RX_NUM, --C-477
WPEDW_PRTL_FILL_STTS_CD, --C-478
WPEDW_DRUG_PKG_SZ_QTY_EXT, --C-479
WPEDW_INGRED_COST_MRGN, --C-480
WPEDW_DSPNSG_FEE_MRGN, --C-481
WPEDW_ADMIN_FEE_MRGN, --C-482
WPEDW_AMT_BILLD_MRGN, --C-483
WLP_PHYS_IO_NTW_IND) --C-484

SELECT
       --The Source System code is retrieved from the Group miscellaneous pass through field in Claims master. 
       --Based on the value in the pass through field, the source system value is assigned
       CASE
            WHEN    TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4)) = 'WGS' THEN 'WGS'
            WHEN    SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'STAR' THEN 'STAR'
            WHEN    SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'QCAR' THEN 'QCAR'
            WHEN    TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4)) = 'WGS' THEN 'WGS'
            WHEN    SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'STAR' THEN 'STAR'
            WHEN    SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'QCAR' THEN 'QCAR'
            ELSE    RPAD(' ',4,' ')
       END AS "1", --SRC_SYSTM
       NULL AS "C-001a", --WPEDW_RECORD_SEQ_NBR
       --The date default value in the source table is '8888-12-31'. This is converted to the required default '9999-12-31'
       --If the source field is empty, default value is assigned
       CASE
            WHEN    LZ_ESI_CLM_MSTR.ADJDCTN_DT = DATE '8888-12-31' THEN DATE '9999-12-31'
            WHEN    LZ_ESI_CLM_MSTR.ADJDCTN_DT IS NULL THEN DATE '9999-12-31'
            ELSE    LZ_ESI_CLM_MSTR.ADJDCTN_DT
       END AS "C-001b", --WPEDW_RECORD_SEQ_DT_YYMMDD
       SUBSTR(LZ_ESI_CLM_MSTR.CARDHOLDER_ID_NBR,1,15) AS "C-002", --WPEDW_SUB_NBR
       LZ_ESI_CLM_MSTR.CARDHOLDER_ID_NBR AS "C-003", --WPEDW_SUB_NBR_20
       --If the source value is 1, it denotes the gender Male and the value 2 denotes the gender Female
       CASE
            WHEN    LZ_ESI_CLM_MSTR.SEX_CD = 1 THEN 'M'
            WHEN    LZ_ESI_CLM_MSTR.SEX_CD = 2 THEN 'F'
            ELSE    ' '
       END AS "C-004", --WPEDW_PAT_SEX_CD
       CASE
            WHEN ( TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4)) = 'STAR' OR
                   TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4)) = 'STAR'
                 )
            THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,57,2)
            ELSE TRIM(LZ_ESI_CLM_MSTR.WLP_MBR_CD)
       END AS "C-005", --WPEDW_PAT_REL_CD
       CAST( 
              SUBSTR(
                     CAST(
                            CAST( LZ_ESI_CLM_MSTR.BRTH_DT AS DATE FORMAT 'YYYY') 
                     AS CHAR(4) ) 
                   , 1, 2)
       AS DECIMAL(2)) AS "C-006", --WPEDW_PAT_BCEN
       --The date default value in the source table is '8888-12-31'. This is converted to the required default '9999-12-31'
       --If the source field is empty, default value is assigned
       CASE
            WHEN    LZ_ESI_CLM_MSTR.BRTH_DT = DATE '8888-12-31' THEN DATE '9999-12-31'
            WHEN    LZ_ESI_CLM_MSTR.BRTH_DT IS NULL THEN DATE '9999-12-31'
            ELSE    LZ_ESI_CLM_MSTR.BRTH_DT
       END AS "C-007", --WPEDW_PAT_BIRTH_DT
       CASE
            WHEN    ( TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4)) = 'WGS' OR
                      TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4)) = 'WGS'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,1,15)
            WHEN    ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'QCAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'QCAR'
                    )
                THEN
                    CASE
                         WHEN    SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,2) IN ('32', '33', '34', '35')
                             THEN ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,163,7) ||
                                    SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,2) ||
                                    SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,1,3)
                                  )
                         ELSE    NULL
                    END
            WHEN    ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'STAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'STAR'
                    )
                THEN
                    CASE
                         WHEN    SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,1,3) IN ('IND', 'SNR', 'STE')
                             THEN TRIM ( TRAILING FROM ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,1,6) ||
                                                         '0000'
                                                       )
                                       )
                         ELSE    TRIM ( TRAILING FROM ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,30,6) ||
                                                        '0000'
                                                      )
                                       )
                    END
       END AS "C-008", --WPEDW_GROUP_NBR
       --TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4)) AS "C-009", --WPEDW_SRC_SYS_ELIG
       --The Source System code is retrieved from the Group miscellaneous pass through field in Claims master. 
       --Based on the value in the pass through field, the source system value is assigned
       CASE
            WHEN    TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4)) = 'WGS' THEN 'WGS'
            WHEN    SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'STAR' THEN 'STA'
            WHEN    SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'QCAR' THEN 'QCA'
            WHEN    TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4)) = 'WGS' THEN 'WGS'
            WHEN    SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'STAR' THEN 'STA'
            WHEN    SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'QCAR' THEN 'QCA'
            ELSE    RPAD(' ',3,' ')
       END AS "C-009", --WPEDW_SRC_SYS_ELIG
       LZ_ESI_CLM_MSTR.CLNT_BPL_ID AS "C-011", --WPEDW_SERIAL_NBR
       LZ_ESI_CLM_MSTR.PHRMCY_NBR AS "C-014", --WPEDW_PHARM_ID
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(PHRMCY_INFO.PHRMCY_LCTN_ST_CD) IN ('UNK' ,'NA', '') THEN  NULL
           ELSE TRIM(PHRMCY_INFO.PHRMCY_LCTN_ST_CD)
       END AS "C-015", --WPEDW_PHARM_STATE
       PHRMCY_INFO.ZIP_CD AS "C-017", --WPEDW_PHARM_ZIP
       LZ_ESI_CLM_MSTR.ESI_ADJDCTN_RFRNC_NBR AS "C-018", --WPEDW_DOC_NBR
       LZ_ESI_CLM_MSTR.RX_NBR AS "C-020", --WPEDW_RX_NBR
       --The date default value in the source table is '8888-12-31'. This is converted to the required default '9999-12-31'
       --If the source field is empty, default value is assigned
       CASE
            WHEN    LZ_ESI_CLM_MSTR.CHCK_DT = DATE '8888-12-31' THEN DATE '9999-12-31'
            WHEN    LZ_ESI_CLM_MSTR.CHCK_DT IS NULL THEN DATE '9999-12-31'
            ELSE    LZ_ESI_CLM_MSTR.CHCK_DT
       END AS "C-023", --WPEDW_PAID_CENDT
       --The date default value in the source table is '8888-12-31'. This is converted to the required default '9999-12-31'
       --If the source field is empty, default value is assigned
       CASE
            WHEN    LZ_ESI_CLM_MSTR.FILLED_DT = DATE '8888-12-31' THEN DATE '9999-12-31'
            WHEN    LZ_ESI_CLM_MSTR.FILLED_DT IS NULL THEN DATE '9999-12-31'
            ELSE    LZ_ESI_CLM_MSTR.FILLED_DT
       END AS "C-024", --WPEDW_FILL_CENDT
       LZ_ESI_CLM_MSTR.NDC_NBR AS "C-026b", --WPEDW_NDC_NBR11
       --WPEDW_DRUG_NM is a Drug field
       --The drug fields have a fixed hierarchy for retrieving data.
       --  1) If valid data exists in Claims Master, pass that value to the target
       -- 2) If there is no valid data in Claims Master, check whether valid value exists in FDB_NDC. If a valid value is found, pass the value to the target
       -- 3) If there is no valid data in FDB_NDC, check whether valid value exists in RX_MSTR. If a valid value is found, pass the value to the target
       CASE
            WHEN    TRIM(SUBSTR(LZ_ESI_CLM_MSTR.LBL_NM,1,25)) NOT IN ('UNK' ,'NA', '') THEN TRIM(SUBSTR(LZ_ESI_CLM_MSTR.LBL_NM,1,25))
            ELSE 
                CASE 
                    WHEN    TRIM(SUBSTR(NBC_INFO.LABEL_NM,1,25)) NOT IN ('UNK' ,'NA', '') THEN TRIM(SUBSTR(NBC_INFO.LABEL_NM,1,25))
                    ELSE    RX_INFO.LABEL_NM
                END
       END AS "C-027", --WPEDW_DRUG_NM
       --WPEDW_THERAP_CLASS_CD is a Drug field
       --The drug fields have a fixed hierarchy for retrieving data.
       --  1) If valid data exists in Claims Master, pass that value to the target
       -- 2) If there is no valid data in Claims Master, check whether valid value exists in FDB_NDC. If a valid value is found, pass the value to the target
       -- 3) If there is no valid data in FDB_NDC, check whether valid value exists in RX_MSTR. If a valid value is found, pass the value to the target
       CASE
            --If the source is empty or has the values "UNK" or "NA" the next field in the hierachy is checked for proper value.
            WHEN    TRIM(SUBSTR(NBC_INFO.THRPTC_AHFS_CLASS_CD,1,6)) IN ('UNK' ,'NA', '') THEN
                CASE
                    --If the source is empty or has the values "UNK" or "NA" the next field in the hierachy is checked for proper value.
                    WHEN    TRIM(SUBSTR(RX_INFO.THRPTC_AHFS_CLASS_CD,1,6)) IN ('UNK' ,'NA', '') THEN 0
                    ELSE
                        --Below condition is to check whether the value is non-numeric
                        CASE
                            WHEN    (   POSITION(' ' IN TRIM(SUBSTR(RX_INFO.THRPTC_AHFS_CLASS_CD,1,6))) > 0) 
                                     OR (UPPER(TRIM(SUBSTR(RX_INFO.THRPTC_AHFS_CLASS_CD,1,6))) (CASESPECIFIC) <> LOWER(TRIM(SUBSTR(RX_INFO.THRPTC_AHFS_CLASS_CD,1,6))) (CASESPECIFIC)) 
                                THEN 0
                            ELSE    CAST (TRIM(SUBSTR(RX_INFO.THRPTC_AHFS_CLASS_CD,1,6)) AS DECIMAL (6,0))
                        END
                END
            ELSE
                --Below condition is to check whether the value is non-numeric
                CASE
                    WHEN    (   POSITION(' ' IN TRIM(SUBSTR(NBC_INFO.THRPTC_AHFS_CLASS_CD,1,6))) > 0) 
                                     OR (UPPER(TRIM(SUBSTR(NBC_INFO.THRPTC_AHFS_CLASS_CD,1,6))) (CASESPECIFIC) <> LOWER(TRIM(SUBSTR(NBC_INFO.THRPTC_AHFS_CLASS_CD,1,6))) (CASESPECIFIC)) 
                        THEN 0
                    ELSE    CAST (TRIM(SUBSTR(NBC_INFO.THRPTC_AHFS_CLASS_CD,1,6)) AS DECIMAL (6,0))
                END
       END AS "C-028", --WPEDW_THERAP_CLASS_CD
       CAST (CAST (LZ_ESI_CLM_MSTR.DEA_SCHDL_CD AS DECIMAL (1,0)) AS CHAR(1)) AS "C-029", --WPEDW_DEA_CD, 
       --The value passed to target is based on the transformation logic specified for the field in the mapping document
       CASE
            WHEN    TRIM(LZ_ESI_CLM_MSTR.DRUG_TYPE_CD) = '0' THEN ' '
            WHEN    TRIM(LZ_ESI_CLM_MSTR.DRUG_TYPE_CD) = '1' THEN 'B'
            WHEN    TRIM(LZ_ESI_CLM_MSTR.DRUG_TYPE_CD) = '2' THEN 'B'
            WHEN    TRIM(LZ_ESI_CLM_MSTR.DRUG_TYPE_CD) = '3' THEN 'G'
            WHEN    TRIM(LZ_ESI_CLM_MSTR.DRUG_TYPE_CD) = '4' THEN ' '
            WHEN    TRIM(LZ_ESI_CLM_MSTR.DRUG_TYPE_CD) = '5' THEN 'B'
            ELSE    NULL
       END AS "C-030", --WPEDW_BRAND_CD
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
            WHEN    TRIM(LZ_ESI_CLM_MSTR.DAW_PROD_SLCTN_CD) IN ('UNK' ,'NA', '') THEN 0
            --Below condition is to check whether the value is non-numeric
            WHEN    (   POSITION(' ' IN TRIM(LZ_ESI_CLM_MSTR.DAW_PROD_SLCTN_CD)) > 0) 
                     OR (UPPER(TRIM(LZ_ESI_CLM_MSTR.DAW_PROD_SLCTN_CD)) (CASESPECIFIC) <> LOWER(TRIM(LZ_ESI_CLM_MSTR.DAW_PROD_SLCTN_CD)) (CASESPECIFIC)) 
                THEN 0
            WHEN    LZ_ESI_CLM_MSTR.DAW_PROD_SLCTN_CD IS NULL THEN 0
            ELSE    CAST (TRIM(LZ_ESI_CLM_MSTR.DAW_PROD_SLCTN_CD) AS DECIMAL (1,0))
       END AS "C-031", --WPEDW_DAW_CD
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
            WHEN    TRIM(LZ_ESI_CLM_MSTR.NEW_REFILL_CD) IN ('UNK' ,'NA', '') THEN NULL
            WHEN    TRIM(LZ_ESI_CLM_MSTR.NEW_REFILL_CD) = '00' THEN 'N'
            ELSE    'Y'
       END AS "C-032", --WPEDW_REFILL_CD
       --If the claim is a reversal claim, the value is negated
       CASE
            WHEN    TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'R'
                THEN ( -1 *  LZ_ESI_CLM_MSTR.MTRC_QTY_NBR )
            ELSE    LZ_ESI_CLM_MSTR.MTRC_QTY_NBR
       END AS "C-033", --WPEDW_DISPNSE_QTY
       --If the claim is a reversal claim, the value is negated
       CASE
            WHEN    TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'R'
                THEN ( -1 *  LZ_ESI_CLM_MSTR.DAYS_SPLY_NBR )
            ELSE    LZ_ESI_CLM_MSTR.DAYS_SPLY_NBR
       END AS "C-034", --WPEDW_DAYS_SUPPLY
       --WPEDW_DISPNSE_UNT is a Drug field
       --The drug fields have a fixed hierarchy for retrieving data.
       --  1) If valid data exists in Claims Master, pass that value to the target
       -- 2) If there is no valid data in Claims Master, check whether valid value exists in FDB_NDC. If a valid value is found, pass the value to the target
       -- 3) If there is no valid data in FDB_NDC, check whether valid value exists in RX_MSTR. If a valid value is found, pass the value to the target
       CASE
            --If the source is empty or has the values "UNK" or "NA" an empty string is passed
            WHEN    TRIM(NBC_INFO.PKG_UOM_CD) IN ('UNK' ,'NA', '') THEN
                CASE
                    --If the source is empty or has the values "UNK" or "NA" an empty string is passed
                    WHEN    TRIM(RX_INFO.PKG_UOM_CD) IN ('UNK' ,'NA', '') THEN NULL
                    ELSE    RX_INFO.PKG_UOM_CD
                END
            ELSE    NBC_INFO.PKG_UOM_CD
       END AS "C-035", --WPEDW_DISPNSE_UNT
       --If the claim is a reversal claim, the value is negated
       CASE
           WHEN TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'R'
               THEN ( -1 *  LZ_ESI_CLM_MSTR.CSTMRY_CHRG_AMT ) + LZ_ESI_CLM_MSTR.WLP_DSPNSG_FEE + LZ_ESI_CLM_MSTR.WLP_SALES_TAX
           ELSE LZ_ESI_CLM_MSTR.CSTMRY_CHRG_AMT + LZ_ESI_CLM_MSTR.WLP_DSPNSG_FEE + LZ_ESI_CLM_MSTR.WLP_SALES_TAX
       END AS "C-036", --WPEDW_PHARM_BILL_AMT
       --If there is no pricing amount found against the NDC number for the claim, pass zero else if the pricing amount retrieved is within the width of the target field, pass the value.
       --If the pricing value retrieved exceeds the width of the target field, pass the max value that can be accomodated within the width of the target.
       CASE
           WHEN PRCNG_INFO_AWP.PRICE_AMT IS NULL THEN 0
           ELSE
               CASE
                   WHEN PRCNG_INFO_AWP.PRICE_AMT <= 9999.9999 THEN PRCNG_INFO_AWP.PRICE_AMT
                   ELSE
                        CASE
                            WHEN PRCNG_INFO_AWP.PRICE_AMT > 9999.9999 THEN 9999.9999
                            ELSE 0
                        END
               END
       END AS "C-037", --WPEDW_PER_UNT_AWP
       --If the claim is a reversal claim, the value is negated
       CASE
            WHEN TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'R'
            THEN ( -1 *  LZ_ESI_CLM_MSTR.FULL_AWP_AMT )
            ELSE LZ_ESI_CLM_MSTR.FULL_AWP_AMT
       END AS "C-038", --WPEDW_EXTENDED_AWP
       LZ_ESI_CLM_MSTR.WLP_INGRED_COST + LZ_ESI_CLM_MSTR.OTHR_PAYOR_AMT AS "C-039", --WPEDW_INGRED_COST
       LZ_ESI_CLM_MSTR.WLP_DSPNSG_FEE AS "C-040", --WPEDW_DISPNSE_FEE
       LZ_ESI_CLM_MSTR.DDCTBL_AMT AS "C-041", --WPEDW_DEDUCT
       --If the claim is a reversal claim, the value AMT_EXCEED_PER_BENE_MAX is negated. The rest of the fields follow the same equation as per the business logic specified in the mapping document
       CASE
            WHEN TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'R'
            THEN (
                    LZ_ESI_CLM_MSTR.CPAY_AMT  -
                    (LZ_ESI_CLM_MSTR.DDCTBL_AMT - LZ_ESI_CLM_MSTR.HRA_APLYD_AMT)  -
                    (LZ_ESI_CLM_MSTR.MBR_AMT_COINSRN - ( -1 *  LZ_ESI_CLM_MSTR.AMT_EXCEED_PER_BENE_MAX ) )
                 )
            ELSE (  LZ_ESI_CLM_MSTR.CPAY_AMT -
                    (LZ_ESI_CLM_MSTR.DDCTBL_AMT - LZ_ESI_CLM_MSTR.HRA_APLYD_AMT)  -
                    (LZ_ESI_CLM_MSTR.MBR_AMT_COINSRN - LZ_ESI_CLM_MSTR.AMT_EXCEED_PER_BENE_MAX)
                 )
       END AS "C-042", --WPEDW_COPAY
       --If the claim is a reversal claim, the value is negated
       CASE
            WHEN TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'R'
                THEN (LZ_ESI_CLM_MSTR.MBR_AMT_COINSRN - ( -1 *  LZ_ESI_CLM_MSTR.AMT_EXCEED_PER_BENE_MAX ) )
            ELSE (LZ_ESI_CLM_MSTR.MBR_AMT_COINSRN - LZ_ESI_CLM_MSTR.AMT_EXCEED_PER_BENE_MAX)
       END AS "C-043", --WPEDW_COINSUR
       LZ_ESI_CLM_MSTR.WLP_SALES_TAX AS "C-045", --WPEDW_TAX_AMT
       --If the claim is a denied claim, pass the actual denied code, otherwise pass an empty string
       CASE
            WHEN TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'D' THEN LZ_ESI_CLM_MSTR.ADJST_RJCT_CD
            ELSE NULL
       END AS "C-048a", --WPEDW_EXCLUS1_CD
       --If the claim is a denied claim and if the denied code is a valid , pass the CSTMRY_CHRG_AMT as the denied amount, otherwise pass zero value
       CASE
            WHEN TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'D' THEN
                CASE
                    WHEN TRIM( LZ_ESI_CLM_MSTR.ADJST_RJCT_CD) = '' THEN 0
                    WHEN LZ_ESI_CLM_MSTR.ADJST_RJCT_CD IS NULL THEN 0
                    ELSE LZ_ESI_CLM_MSTR.CSTMRY_CHRG_AMT
                END
            ELSE 0
       END AS "C-048b", --WPEDW_EXCLUS1_AMT
       --If the claim is a denied claim, pass the actual denied code, otherwise pass an empty string
       CASE
            WHEN TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'D' THEN LZ_ESI_CLM_MSTR.ADJST_RJCT_CD_2
            ELSE NULL
       END AS "C-048c", --WPEDW_EXCLUS2_CD
       NULL AS "C-048d", --WPEDW_EXCLUS2_AMT
       --If the claim is a denied claim, pass the actual denied code, otherwise pass an empty string
       CASE
            WHEN TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'D' THEN LZ_ESI_CLM_MSTR.ADJST_RJCT_CD_3
            ELSE NULL
       END AS "C-048e", --WPEDW_EXCLUS3_CD
       NULL AS "C-048f", --WPEDW_EXCLUS3_AMT
       NULL AS "C-048g", --WPEDW_EXCLUS4_CD
       NULL AS "C-048h", --WPEDW_EXCLUS4_AMT
       NULL AS "C-048i", --WPEDW_EXCLUS5_CD
       NULL AS "C-048j", --WPEDW_EXCLUS5_AMT
       NULL AS "C-048k", --WPEDW_EXCLUS6_CD
       NULL AS "C-048l", --WPEDW_EXCLUS6_AMT
       NULL AS "C-048m", --WPEDW_EXCLUS7_CD
       NULL AS "C-048n", --WPEDW_EXCLUS7_AMT
       NULL AS "C-048o", --WPEDW_EXCLUS8_CD
       NULL AS "C-048p", --WPEDW_EXCLUS8_AMT
       NULL AS "C-048q", --WPEDW_EXCLUS9_CD
       NULL AS "C-048r", --WPEDW_EXCLUS9_AMT
       NULL AS "C-048s", --WPEDW_EXCLUS10_CD
       NULL AS "C-048t", --WPEDW_EXCLUS10_AMT
       LZ_ESI_CLM_MSTR.WLP_AMT_BILLD - LZ_ESI_CLM_MSTR.WLP_ADMIN_FEE AS "C-049", --WPEDW_NET_CHECK
       --The date default value in the source table is '8888-12-31'. This is converted to the required default '9999-12-31'
       --If the source field is empty, default value is assigned
       CASE
            WHEN    LZ_ESI_CLM_MSTR.ADJDCTN_DT = DATE '8888-12-31' THEN  DATE '9999-12-31'
            WHEN    LZ_ESI_CLM_MSTR.ADJDCTN_DT IS NULL THEN  DATE '9999-12-31'
            ELSE    LZ_ESI_CLM_MSTR.ADJDCTN_DT 
       END AS "C-050", --WPEDW_PROC_CENDT
       --WPEDW_GPI is a Drug field
       --The drug fields have a fixed hierarchy for retrieving data.
       --  1) If valid data exists in Claims Master, pass that value to the target
       -- 2) If there is no valid data in Claims Master, check whether valid value exists in FDB_NDC. If a valid value is found, pass the value to the target
       -- 3) If there is no valid data in FDB_NDC, check whether valid value exists in RX_MSTR. If a valid value is found, pass the value to the target
       CASE
            --If the source is empty or has the values "UNK" or "NA" an empty string is passed
            WHEN    TRIM(LZ_ESI_CLM_MSTR.GPI) IN ('UNK' ,'NA', '') THEN
                CASE 
                    --If the source is empty or has the values "UNK" or "NA" an empty string is passed
                    WHEN    TRIM(RX_INFO.GPI) IN ('UNK' ,'NA', '') THEN NULL
                    ELSE    RX_INFO.GPI
                END
            ELSE    LZ_ESI_CLM_MSTR.GPI
       END AS "C-052", --WPEDW_GPI
       --WPEDW_GENERIC_AVAIL is a Drug field
       --The drug fields have a fixed hierarchy for retrieving data.
       --  1) If valid data exists in Claims Master, pass that value to the target
       -- 2) If there is no valid data in Claims Master, check whether valid value exists in FDB_NDC. If a valid value is found, pass the value to the target
       -- 3) If there is no valid data in FDB_NDC, check whether valid value exists in RX_MSTR. If a valid value is found, pass the value to the target
       CASE WHEN ((TRIM(LZ_ESI_CLM_MSTR.DRUG_TYPE_CD) = '3' AND NBC_INFO.GNRC_IND_CD = '1') OR LZ_ESI_CLM_MSTR.FED_DRUG_CLS_CD = 'O')
                THEN 'Y'
            ELSE CASE WHEN ((TRIM(LZ_ESI_CLM_MSTR.DRUG_TYPE_CD) = '3' AND RX_INFO.GNRC_MULTI_SRC_CD = '1') OR LZ_ESI_CLM_MSTR.FED_DRUG_CLS_CD = 'O')
                      THEN 'Y'
                      ELSE 'N'
                 END
       END AS "C-054", --WPEDW_GENERIC_AVAIL
       CASE
            --If the source is empty or has the values "UNK" or "NA" , the copay amount is passed as is. If it is reversal claim, the LZ_ESI_CLM_MSTR.CSTMRY_CHRG_AMT is added to copay amount
            WHEN TRIM(LZ_ESI_CLM_MSTR.ADJST_RJCT_CD) IN ('UNK' ,'NA', '') OR LZ_ESI_CLM_MSTR.ADJST_RJCT_CD IS NULL
                THEN
                    CASE
                        --If the claim is a reversal claim, the value CSTMRY_CHRG_AMT is negated. The rest of the fields follow the same equation as per the business logic specified in the mapping document
                        WHEN TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'R'
                            THEN ( -1 *  LZ_ESI_CLM_MSTR.CSTMRY_CHRG_AMT ) + LZ_ESI_CLM_MSTR.WLP_DSPNSG_FEE - LZ_ESI_CLM_MSTR.CPAY_AMT - (LZ_ESI_CLM_MSTR.WLP_AMT_BILLD - LZ_ESI_CLM_MSTR.WLP_ADMIN_FEE)
                        ELSE LZ_ESI_CLM_MSTR.CSTMRY_CHRG_AMT + LZ_ESI_CLM_MSTR.WLP_DSPNSG_FEE - LZ_ESI_CLM_MSTR.CPAY_AMT - (LZ_ESI_CLM_MSTR.WLP_AMT_BILLD - LZ_ESI_CLM_MSTR.WLP_ADMIN_FEE)
                    END
            ELSE
                --If the claim is a reversal claim, the value CSTMRY_CHRG_AMT is negated. The rest of the fields follow the same equation as per the business logic specified in the mapping document
                CASE
                    WHEN TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'R'
                        THEN ( -1 *  LZ_ESI_CLM_MSTR.CSTMRY_CHRG_AMT ) + LZ_ESI_CLM_MSTR.WLP_DSPNSG_FEE - (LZ_ESI_CLM_MSTR.CPAY_AMT + LZ_ESI_CLM_MSTR.ADJST_RJCT_CD) - (LZ_ESI_CLM_MSTR.WLP_AMT_BILLD - LZ_ESI_CLM_MSTR.WLP_ADMIN_FEE)
                    ELSE LZ_ESI_CLM_MSTR.CSTMRY_CHRG_AMT + LZ_ESI_CLM_MSTR.WLP_DSPNSG_FEE - (LZ_ESI_CLM_MSTR.CPAY_AMT + LZ_ESI_CLM_MSTR.CSTMRY_CHRG_AMT) - (LZ_ESI_CLM_MSTR.WLP_AMT_BILLD - LZ_ESI_CLM_MSTR.WLP_ADMIN_FEE)
                END
       END AS "C-057", --WPEDW_DIFF
       --The values are passed as per the business logic defined in the mapping document.
       CASE
            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'P' THEN 1
            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'R' THEN -1
            ELSE    0
       END AS "C-058", --WPEDW_NUM_CLM
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
            WHEN    TRIM(LZ_ESI_CLM_MSTR.PRSCRBR_QLFR_CD) IN ('UNK' ,'NA', '') THEN NULL
            ELSE    TRIM(LZ_ESI_CLM_MSTR.PRSCRBR_QLFR_CD)
       END AS "C-060", --WPEDW_DEA_PRVDR_ID_QUAL
       CASE
            WHEN    TRIM(LZ_ESI_CLM_MSTR.PRSCRBR_ID) IN ('UNK' ,'NA', '') THEN NULL
            ELSE    TRIM(LZ_ESI_CLM_MSTR.PRSCRBR_ID)
       END AS "C-061", --WPEDW_DEA_PRVDR_ID
       SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,75,30) AS "C-062", --WPEDW_CASE_NAME
       CASE
            WHEN    ( TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4)) = 'WGS' OR
                      TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4)) = 'WGS'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,140,8)
            WHEN    ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'QCAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'QCAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'STAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'STAR'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,154,8)
       END AS "C-064", --WPEDW_MBS
       NULL AS "C-067", --WPEDW_REGION
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target based on the business logic defined in the mapping document.
       CASE
            WHEN    TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID) IN ('UNK' ,'NA', '') THEN NULL
            WHEN    ( UPPER(TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID)) IN ('HOUSE ACCOUNT','NATL ACCTS') AND
                      UPPER(TRIM(LZ_ESI_CLM_MSTR.SUB_CARR_CD)) = 'WLH'
                    )
                THEN '36'
            ELSE    SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,2)
       END AS "C-071", --WPEDW_PRODUCT
       CASE
            WHEN    ( TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4)) = 'WGS' OR
                      TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4)) = 'WGS'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,144,1)
            WHEN    ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'QCAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'QCAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'STAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'STAR'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,158,1)
       END AS "C-072", --WPEDW_FUND_TYPE
       --The date default value in the source table is '8888-12-31'. This is converted to the required default '9999-12-31'
       --If the source field is empty, default value is assigned
       CASE
            WHEN    LZ_ESI_CLM_MSTR.CHCK_DT = DATE '8888-12-31' THEN DATE '9999-12-31'
            WHEN    LZ_ESI_CLM_MSTR.CHCK_DT IS NULL THEN DATE '9999-12-31'
            ELSE    LZ_ESI_CLM_MSTR.CHCK_DT
       END AS "C-075", --WPEDW_PERIOD
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
            WHEN    TRIM(LZ_ESI_CLM_MSTR.PRSCRBR_ADRS_ST) IN ('UNK' ,'NA', '') THEN NULL
            ELSE    TRIM(LZ_ESI_CLM_MSTR.PRSCRBR_ADRS_ST)
       END AS "C-086", --WPEDW_STATE
       LZ_ESI_CLM_MSTR.PRSCRBR_ADRS_ZIP AS "C-087", --WPEDW_ZIP9
       --The below set of case statements is based on the detailed business logic specified in the mapping document for the field.
       CASE
            --Proserv clients
            WHEN    ( CASE
                            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID)) IN ('HOUSE ACCOUNT','NATL ACCTS') THEN '36'
                            --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
                            WHEN    TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID) IN ('UNK' ,'NA', '') THEN NULL
                            ELSE    SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,2)
                      END
                    ) IN ('36', '41', '42', '43', '61', '62', '63', '64') THEN 'BCC'
            WHEN    ( CASE
                            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID)) IN ('HOUSE ACCOUNT','NATL ACCTS') THEN '36'
                            --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
                            WHEN    TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID) IN ('UNK' ,'NA', '') THEN NULL
                            ELSE    SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,2)
                      END
                    ) IN ('28', '32', '33', '34', '35') THEN 'BGA'
            WHEN    ( CASE
                            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID)) IN ('HOUSE ACCOUNT','NATL ACCTS') THEN '36'
                            --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
                            WHEN    TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID) IN ('UNK' ,'NA', '') THEN NULL
                            ELSE    SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,2)
                      END
                    ) IN ('08', '67', '69', '83', '87', '88') THEN 'TPA'
            WHEN    ( CASE
                            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID)) IN ('HOUSE ACCOUNT','NATL ACCTS') THEN '36'
                            --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
                            WHEN    TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID) IN ('UNK' ,'NA', '') THEN NULL
                            ELSE    SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,2)
                      END
                    ) = '51' THEN 'CNJ'
            WHEN    ( CASE
                            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID)) IN ('HOUSE ACCOUNT','NATL ACCTS') THEN '36'
                            --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
                            WHEN    TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID) IN ('UNK' ,'NA', '') THEN NULL
                            ELSE    SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,2)
                      END
                    ) = '50' THEN 'BID'
            WHEN    ( CASE
                            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID)) IN ('HOUSE ACCOUNT','NATL ACCTS') THEN '36'
                            --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
                            WHEN    TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID) IN ('UNK' ,'NA', '') THEN NULL
                            ELSE    SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,2)
                      END
                    ) IN ('58', '59', '68', '79') THEN 'TMK'
            WHEN    ( CASE
                            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID)) IN ('HOUSE ACCOUNT','NATL ACCTS') THEN '36'
                            --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
                            WHEN    TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID) IN ('UNK' ,'NA', '') THEN NULL
                            ELSE    SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,2)
                      END
                    ) IN ('27', '29') THEN 'BRI'
            WHEN    ( CASE
                            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID)) IN ('HOUSE ACCOUNT','NATL ACCTS') THEN '36'
                            --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
                            WHEN    TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID) IN ('UNK' ,'NA', '') THEN NULL
                            ELSE    SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,2)
                      END
                    ) = '19' THEN 'KSM'
            WHEN    ( CASE
                            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID)) IN ('HOUSE ACCOUNT','NATL ACCTS') THEN '36'
                            --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
                            WHEN    TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID) IN ('UNK' ,'NA', '') THEN NULL
                            ELSE    SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,2)
                      END
                    ) = '18' THEN 'INM'
            WHEN    ( CASE
                            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID)) IN ('HOUSE ACCOUNT','NATL ACCTS') THEN '36'
                            --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
                            WHEN    TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID) IN ('UNK' ,'NA', '') THEN NULL
                            ELSE    SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,2)
                      END
                    ) = '66' THEN 'HLK'
            WHEN    ( CASE
                            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID)) IN ('HOUSE ACCOUNT','NATL ACCTS') THEN '36'
                            --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
                            WHEN    TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID) IN ('UNK' ,'NA', '') THEN NULL
                            ELSE    SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,2)
                      END
                    ) = '95' THEN 'BWI'

            --ProPBM clients
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WLE' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) = 'CDHP' ) THEN 'CCO'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WLE' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) <> 'CDHP' ) THEN 'COL'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WLF' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) = 'CDHP' ) THEN 'CNV'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WLF' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) <> 'CDHP' ) THEN 'NEV'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WLJ' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) = 'CDHP' ) THEN 'CUN'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WLJ' AND UPPER(TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID)) = 'UN SENIOR' ) THEN 'WIS'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WL2' AND UPPER(TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID)) = 'HOUSE ACCOUNT' ) THEN 'HOU'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WL6' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) = 'CDHP' ) THEN 'CWI'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WL6' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) <> 'CDHP' ) THEN 'WIS'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WLH' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) = 'CDHP' ) THEN 'CCA'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WLH' AND UPPER(TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID)) = 'NATL ACCTS' ) THEN 'NCA'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WLH' AND UPPER(TRIM(LZ_ESI_CLM_MSTR.CLNT_CUST_ID)) = 'CA SENIOR' ) THEN 'WIS'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WM2' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,10,3)) = 'IND' ) THEN 'PFI'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WM2' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,10,3)) = 'EGR' ) THEN 'PFG'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WM2' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,10,3)) = 'WGS' ) THEN 'GRW'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WLB' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) = 'CDHP' ) THEN 'CGA'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WL7' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) = 'CDHP' ) THEN 'CCT'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WLA' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) = 'CDHP' ) THEN 'CVA'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WL5' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) = 'CDHP' ) THEN 'COH'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WL2' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) = 'CDHP' ) THEN 'CIN'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WL3' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) = 'CDHP' ) THEN 'CKY'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WLE' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) = 'CDHP' ) THEN 'CCO'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WL9' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) = 'CDHP' ) THEN 'CNH'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WLD' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) = 'CDHP' ) THEN 'CEM'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WL4' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) = 'CDHP' ) THEN 'CMO'
            WHEN    ( LZ_ESI_CLM_MSTR.SUB_CARR_CD = 'WL8' AND UPPER(SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,4)) = 'CDHP' ) THEN 'CME'
            ELSE    NULL
       END AS "C-088", --WPEDW_CLIENT_CDE
       CASE
            WHEN    ( TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4)) = 'WGS' OR
                      TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4)) = 'WGS'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,140,8)
            WHEN    ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'QCAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'QCAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'STAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'STAR'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,154,8)
       END AS "C-089", --WPEDW_LOB_CODE
       TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,5,4)) AS "C-090", --WPEDW_NETWORK_CDE
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
            WHEN    TRIM(LZ_ESI_CLM_MSTR.FRMLRY_CD) IN ('UNK' ,'NA', '') THEN NULL
            ELSE    TRIM(LZ_ESI_CLM_MSTR.FRMLRY_CD)
       END AS "C-091", --WPEDW_FORM_IND
       --The value is passed based on the business logic defined in the mapping document.
       CASE
            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.PHRMCY_TYPE_CD)) IN ('R','D') THEN 'R'
            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.PHRMCY_TYPE_CD)) = 'M' THEN 'M'
            ELSE    NULL
       END AS "C-092", --WPEDW_MAIL_ORDER_CDE
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
            WHEN    TRIM(LZ_ESI_CLM_MSTR.PHRMCY_NTWK_IND) IN ('UNK' ,'NA', '') THEN NULL
            ELSE    TRIM(LZ_ESI_CLM_MSTR.PHRMCY_NTWK_IND)
       END AS "C-093", --WPEDW_PAR_IND
       LZ_ESI_CLM_MSTR.PAT_LAST_NM AS "C-096", --WPEDW_MEM_LNAME
       LZ_ESI_CLM_MSTR.PAT_FRST_NM AS "C-097", --WPEDW_MEM_FNAME
       SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,17,3) AS "C-106", --WPEDW_PMG
       --If the claim is a denied claim, apply transformation logic to the claims master source column, else pass the claims master column as is.
       --Transformation logic is applied to RX_MSTR field independent of the claim type.
       --WPEDW_RX_OTC_IND_CDE is a Drug field
       --The drug fields have a fixed hierarchy for retrieving data.
       --  1) If valid data exists in Claims Master, pass that value to the target
       -- 2) If there is no valid data in Claims Master, check whether valid value exists in FDB_NDC. If a valid value is found, pass the value to the target
       -- 3) If there is no valid data in FDB_NDC, check whether valid value exists in RX_MSTR. If a valid value is found, pass the value to the target
       CASE
            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'D' THEN
                CASE
                    --If the source is empty or has the values "UNK" or "NA" an empty string is passed
                    WHEN    TRIM(LZ_ESI_CLM_MSTR.FED_DRUG_CLS_CD) IN ('UNK' ,'NA', '') THEN
                        CASE
                            WHEN    TRIM(NBC_INFO.RX_OTC_CD) = '' THEN
                                CASE
                                    WHEN    TRIM(RX_INFO.RX_OTC_CD) = '' THEN NULL
                                    ELSE
                                        CASE
                                            WHEN UPPER(TRIM(RX_INFO.RX_OTC_CD)) = 'O' THEN 'O'
                                            WHEN UPPER(TRIM(RX_INFO.RX_OTC_CD)) = 'P' THEN 'O'
                                            WHEN UPPER(TRIM(RX_INFO.RX_OTC_CD)) = 'R' THEN 'F'
                                            WHEN UPPER(TRIM(RX_INFO.RX_OTC_CD)) = 'S' THEN 'F'
                                            ELSE NULL
                                        END
                                END
                            ELSE    NBC_INFO.RX_OTC_CD
                        END
                    ELSE
                        CASE
                            WHEN UPPER(TRIM(LZ_ESI_CLM_MSTR.FED_DRUG_CLS_CD)) = 'O' THEN 'O'
                            WHEN UPPER(TRIM(LZ_ESI_CLM_MSTR.FED_DRUG_CLS_CD)) = 'P' THEN 'O'
                            WHEN UPPER(TRIM(LZ_ESI_CLM_MSTR.FED_DRUG_CLS_CD)) = 'R' THEN 'F'
                            WHEN UPPER(TRIM(LZ_ESI_CLM_MSTR.FED_DRUG_CLS_CD)) = 'S' THEN 'F'
                            ELSE NULL
                        END
                END
            ELSE
                CASE
                    --If the source is empty or has the values "UNK" or "NA" an empty string is passed
                    WHEN    TRIM(LZ_ESI_CLM_MSTR.FED_DRUG_CLS_CD) IN ('UNK' ,'NA', '') THEN
                        CASE
                            WHEN    TRIM(NBC_INFO.RX_OTC_CD) = '' THEN
                                CASE
                                    WHEN    TRIM(RX_INFO.RX_OTC_CD) = '' THEN NULL
                                    ELSE
                                        CASE
                                            WHEN UPPER(TRIM(RX_INFO.RX_OTC_CD)) = 'O' THEN 'O'
                                            WHEN UPPER(TRIM(RX_INFO.RX_OTC_CD)) = 'P' THEN 'O'
                                            WHEN UPPER(TRIM(RX_INFO.RX_OTC_CD)) = 'R' THEN 'F'
                                            WHEN UPPER(TRIM(RX_INFO.RX_OTC_CD)) = 'S' THEN 'F'
                                            ELSE NULL
                                        END
                                END
                            ELSE    NBC_INFO.RX_OTC_CD
                        END
                    ELSE    TRIM(LZ_ESI_CLM_MSTR.FED_DRUG_CLS_CD)
                END
       END AS "C-107", --WPEDW_RX_OTC_IND_CDE
       '1' AS "C-109", --WPEDW_REC_CTL_NO
       --The date default value in the source table is '8888-12-31'. This is converted to the required default '9999-12-31'
       --If the source field is empty, default value is assigned
       CASE
            WHEN    LZ_ESI_CLM_MSTR.FILLED_DT = DATE '8888-12-31' THEN DATE '9999-12-31'
            WHEN    LZ_ESI_CLM_MSTR.FILLED_DT IS NULL THEN DATE '9999-12-31'
            ELSE    LZ_ESI_CLM_MSTR.FILLED_DT
       END AS "C-110", --WPEDW_PRSP_DTE
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(LZ_ESI_CLM_MSTR.OTHR_CVRG_CD) IN ('UNK' ,'NA', '') THEN  NULL
           ELSE TRIM(SUBSTR(LZ_ESI_CLM_MSTR.OTHR_CVRG_CD,2,1))
       END AS "C-111", --WPEDW_COB_CD
       CAST( CAST(LZ_ESI_CLM_MSTR.CMPND_CD AS DECIMAL (1,0)) AS CHAR(1)) AS "C-112", --WPEDW_CMPND_PRSP_CD
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(LZ_ESI_CLM_MSTR.PHRMCY_NTWK_IND) IN ('UNK' ,'NA', '') THEN NULL
           ELSE TRIM(LZ_ESI_CLM_MSTR.PHRMCY_NTWK_IND)
       END AS "C-114", --WPEDW_PHAR_NETWK_CD
       LZ_ESI_CLM_MSTR.PAT_LAST_NM AS "C-116a", --WPEDW_PAT_LAST_NM
       SUBSTR(TRIM(LZ_ESI_CLM_MSTR.PAT_FRST_NM),1,10) AS "C-116b", --WPEDW_PAT_FIRST_NM
       SUBSTR(TRIM(LZ_ESI_CLM_MSTR.PAT_MID_INIT),1,1) AS "C-116c", --WPEDW_PAT_MID_INIT
       SUBSTR(TRIM(PHRMCY_INFO.PHRMCY_NM),1,16) AS "C-117a", --WPEDW_PAYEE_LAST_NM
       SUBSTR(TRIM(PHRMCY_INFO.PHRMCY_NM),17,4) AS "C-117c", --WPEDW_PAYEE_FIRST_NM
       NULL AS "C-117e", --WPEDW_PAYEE_MID_INIT
       SUBSTR(TRIM(PHRMCY_INFO.PHRMCY_ADRS_TXT),1,19) AS "C-118a", --WPEDW_PAYE_LINE_1_STR
       SUBSTR(TRIM(PHRMCY_INFO.PHRMCY_ADRS_TXT),20,1) AS "C-118b", --WPEDW_PAYE_LINE_2_STR
       PHRMCY_INFO.PHRMCY_LCTN_CITY_NM AS "C-118c", --WPEDW_PAYE_CITY
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(PHRMCY_INFO.PHRMCY_LCTN_ST_CD) IN ('UNK' ,'NA', '') THEN  NULL
           ELSE TRIM(PHRMCY_INFO.PHRMCY_LCTN_ST_CD)
       END AS "C-118d",--WPEDW_PAYE_ST
       PHRMCY_INFO.ZIP_CD AS "C-119", --WPEDW_PAYEE_ZIP_CD
       8888888 AS "C-120", --WPEDW_PAY_CHK_NO
       --The date default value in the source table is '8888-12-31'. This is converted to the required default '9999-12-31'
       --If the source field is empty, default value is assigned
       CASE
            WHEN    LZ_ESI_CLM_MSTR.MBR_EFCTV_DT = DATE '8888-12-31' THEN DATE '9999-12-31'
            WHEN    LZ_ESI_CLM_MSTR.MBR_EFCTV_DT IS NULL THEN DATE '9999-12-31'
            ELSE    LZ_ESI_CLM_MSTR.MBR_EFCTV_DT
       END AS "C-121", --WPEDW_GRP_DRUG_EFF_DTE
       NULL AS "C-129", --WPEDW_LOB_GRP_INFO
       NULL AS "C-133", --WPEDW_MAIL_ORD_COPAY_TYP_CD
       NULL AS "C-134", --WPEDW_BRAND_COPAY_AMT
       NULL AS "C-136", --WPEDW_COPAY_TYP_CD
       CASE
            WHEN    ( TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4)) = 'WGS' OR
                      TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4)) = 'WGS'
                    ) OR
                    ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'QCAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'QCAR'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,30,15)
            WHEN    ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'STAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'STAR'
                    )
                THEN
                    CASE
                         WHEN    SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,1,3) IN ('IND', 'SNR', 'STE')
                             THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,154,8)
                         ELSE    SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,30,15)
                    END
       END  AS "C-166", --WPEDW_CTL_GRP_NO
       NULL AS "C-168a", --WPEDW_SUBR_STR
       NULL AS "C-168b", --WPEDW_SUBR_CITY
       NULL AS "C-168d", --WPEDW_SUBR_STATE
       NULL AS "C-168e", --WPEDW_SUBR_ZIP_15
       --The date default value in the source table is '8888-12-31'. This is converted to the required default '9999-12-31'
       --If the source field is empty, default value is assigned
       CASE
            WHEN    LZ_ESI_CLM_MSTR.BRTH_DT = DATE '8888-12-31' THEN DATE '9999-12-31'
            WHEN    LZ_ESI_CLM_MSTR.BRTH_DT IS NULL THEN DATE '9999-12-31'
            ELSE    LZ_ESI_CLM_MSTR.BRTH_DT
       END AS "C-169", --WPEDW_DEP_BRTH_DTE
       LZ_ESI_CLM_MSTR.OTHR_PAYOR_AMT AS "C-176", --WPEDW_OTHER_CARRIER_PAY_AMT
       LZ_ESI_CLM_MSTR.DDCTBL_ACCUMD_AMT + LZ_ESI_CLM_MSTR.MBR_OOP_ACCUMD_AMT AS "C-177", --WPEDW_MBR_BEN_LMT_AMT
       (LZ_ESI_CLM_MSTR.WLP_AMT_BILLD - LZ_ESI_CLM_MSTR.WLP_ADMIN_FEE) + LZ_ESI_CLM_MSTR.OTHR_PAYOR_AMT AS "C-178", --WPEDW_CLM_BEN_AMT
       --The date default value in the source table is '8888-12-31'. This is converted to the required default '9999-12-31'
       --If the source field is empty, default value is assigned
       CASE
            WHEN    LZ_ESI_CLM_MSTR.CLM_RCVD_DT = DATE '8888-12-31' THEN DATE '9999-12-31'
            WHEN    LZ_ESI_CLM_MSTR.CLM_RCVD_DT IS NULL THEN DATE '9999-12-31'
            ELSE    LZ_ESI_CLM_MSTR.CLM_RCVD_DT
       END AS "C-181", --WPEDW_CLM_RECEIVE_DTE
       --WPEDW_DRUG_UTL_REVW_TYP_CD is a Drug field
       --The drug fields have a fixed hierarchy for retrieving data.
       --  1) If valid data exists in Claims Master, pass that value to the target
       -- 2) If there is no valid data in Claims Master, check whether valid value exists in FDB_NDC. If a valid value is found, pass the value to the target
       -- 3) If there is no valid data in FDB_NDC, check whether valid value exists in RX_MSTR. If a valid value is found, pass the value to the target
       --The value passed is based on the business logic defined in the mapping document for the field.
       CASE 
            WHEN    TRIM(LZ_ESI_CLM_MSTR.GNRC_CLSFCTN_NBR) IN ('94200', '00002', '00003') THEN '0'
            WHEN    TRIM(NBC_INFO.GCN) IN ('94200', '00002', '00003') THEN '0'
            ELSE    '1'
       END AS "C-184", --WPEDW_DRUG_UTL_REVW_TYP_CD
       --WPEDW_PRSP_DRUG_LABEL_NM is a Drug field
       --The drug fields have a fixed hierarchy for retrieving data.
       --  1) If valid data exists in Claims Master, pass that value to the target
       -- 2) If there is no valid data in Claims Master, check whether valid value exists in FDB_NDC. If a valid value is found, pass the value to the target
       -- 3) If there is no valid data in FDB_NDC, check whether valid value exists in RX_MSTR. If a valid value is found, pass the value to the target
       CASE
            WHEN    SUBSTR(TRIM(LZ_ESI_CLM_MSTR.LBL_NM),1,25) NOT IN ('UNK' ,'NA', '') THEN SUBSTR(TRIM(LZ_ESI_CLM_MSTR.LBL_NM),1,25)
            ELSE 
                CASE 
                    WHEN    SUBSTR(TRIM(NBC_INFO.LABEL_NM),1,25) NOT IN ('UNK' ,'NA', '') THEN SUBSTR(TRIM(NBC_INFO.LABEL_NM),1,25)
                    ELSE    RX_INFO.LABEL_NM
                END
       END AS "C-186", --WPEDW_PRSP_DRUG_LABEL_NM
       --WPEDW_AHFS_DRUG_THERAP_CD is a Drug field
       --The drug fields have a fixed hierarchy for retrieving data.
       --  1) If valid data exists in Claims Master, pass that value to the target
       -- 2) If there is no valid data in Claims Master, check whether valid value exists in FDB_NDC. If a valid value is found, pass the value to the target
       -- 3) If there is no valid data in FDB_NDC, check whether valid value exists in RX_MSTR. If a valid value is found, pass the value to the target
       CASE
            --If the source is empty or has the values "UNK" or "NA" an empty string is passed
            WHEN    TRIM(LZ_ESI_CLM_MSTR.THRPTC_CLS_CD) IN ('UNK' ,'NA', '') THEN
                CASE
                    --If the source is empty or has the values "UNK" or "NA" an empty string is passed
                    WHEN    TRIM(SUBSTR(NBC_INFO.THRPTC_AHFS_CLASS_CD,1,6)) IN ('UNK' ,'NA', '') THEN
                        CASE 
                            --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
                            WHEN    TRIM(SUBSTR(RX_INFO.THRPTC_AHFS_CLASS_CD,1,6)) IN ('UNK' ,'NA', '') THEN 0
                            ELSE
                                CASE
                                    WHEN    (    POSITION(' ' IN TRIM(SUBSTR(RX_INFO.THRPTC_AHFS_CLASS_CD,1,6))) > 0) 
                                              OR (UPPER(TRIM(SUBSTR(RX_INFO.THRPTC_AHFS_CLASS_CD,1,6))) (CASESPECIFIC) <> LOWER(TRIM(SUBSTR(RX_INFO.THRPTC_AHFS_CLASS_CD,1,6))) (CASESPECIFIC)) 
                                        THEN 0
                                    ELSE    CAST (TRIM(SUBSTR(RX_INFO.THRPTC_AHFS_CLASS_CD,1,6)) AS DECIMAL (6,0))
                                END
                        END
                    ELSE
                        CASE
                            WHEN    (    POSITION(' ' IN TRIM(SUBSTR(NBC_INFO.THRPTC_AHFS_CLASS_CD,1,6))) > 0) 
                                      OR (UPPER(TRIM(SUBSTR(NBC_INFO.THRPTC_AHFS_CLASS_CD,1,6))) (CASESPECIFIC) <> LOWER(TRIM(SUBSTR(NBC_INFO.THRPTC_AHFS_CLASS_CD,1,6))) (CASESPECIFIC)) 
                                THEN 0
                            ELSE    CAST (TRIM(SUBSTR(NBC_INFO.THRPTC_AHFS_CLASS_CD,1,6)) AS DECIMAL (6,0))
                        END
                END
            ELSE
                CASE
                    WHEN    (    POSITION(' ' IN TRIM(LZ_ESI_CLM_MSTR.THRPTC_CLS_CD)) > 0) 
                              OR (UPPER(TRIM(LZ_ESI_CLM_MSTR.THRPTC_CLS_CD)) (CASESPECIFIC) <> LOWER(TRIM(LZ_ESI_CLM_MSTR.THRPTC_CLS_CD)) (CASESPECIFIC)) 
                        THEN 0
                    ELSE    CAST (TRIM(LZ_ESI_CLM_MSTR.THRPTC_CLS_CD) AS DECIMAL (6,0))
                END
       END AS "C-188", --WPEDW_AHFS_DRUG_THERAP_CD
       NULL AS "C-191", --WPEDW_MAC_SCHD_IND
       --If there is no pricing amount found against the NDC number for the claim, pass zero else if the pricing amount retrieved is within the width of the target field, pass the value.
       --If the pricing value retrieved exceeds the width of the target field, pass the max value that can be accomodated within the width of the target.
       CASE
           WHEN PRCNG_INFO_AWP.PRICE_AMT IS NULL THEN 0
           ELSE
               CASE
                   WHEN PRCNG_INFO_AWP.PRICE_AMT <= 9999.9999 THEN PRCNG_INFO_AWP.PRICE_AMT
                   ELSE
                        CASE
                            WHEN PRCNG_INFO_AWP.PRICE_AMT > 9999.9999 THEN 9999.9999
                            ELSE 0
                        END
               END
       END AS "C-192", --WPEDW_DRUG_AWP_AMT
       --LZ_ESI_CLM_MSTR.FULL_AWP_AMT AS "C-192", --WPEDW_DRUG_AWP_AMT
       --If the source value is 1, it denotes the gender Male and the value 2 denotes the gender Female
       CASE
            WHEN    LZ_ESI_CLM_MSTR.SEX_CD = 1 THEN 'M'
            WHEN    LZ_ESI_CLM_MSTR.SEX_CD = 2 THEN 'F'
            ELSE    ' '
       END AS "C-197", --WPEDW_MBR_SEX_CD
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(LZ_ESI_CLM_MSTR.PRE_AUTHRZN_RSN) IN ('UNK' ,'NA', '') THEN NULL
           ELSE TRIM(LZ_ESI_CLM_MSTR.PRE_AUTHRZN_RSN)
       END AS "C-200a", --WPEDW_DRUG_PRIOR_APPV_RSN_CD_1
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(LZ_ESI_CLM_MSTR.PRE_AUTHRZN_RSN) IN ('UNK' ,'NA', '') THEN NULL
           ELSE TRIM(LZ_ESI_CLM_MSTR.PRE_AUTHRZN_RSN)
       END AS "C-200b", --WPEDW_DRUG_PRIOR_APPV_RSN_CD_2
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(LZ_ESI_CLM_MSTR.PRE_AUTHRZN_RSN) IN ('UNK' ,'NA', '') THEN NULL
           ELSE TRIM(LZ_ESI_CLM_MSTR.PRE_AUTHRZN_RSN)
       END AS "C-200c", --WPEDW_DRUG_PRIOR_APPV_RSN_CD_3
       CASE
           --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
           WHEN TRIM(LZ_ESI_CLM_MSTR.PRE_AUTHRZN_RSN) IN ('UNK' ,'NA', '') THEN NULL
           ELSE TRIM(LZ_ESI_CLM_MSTR.PRE_AUTHRZN_RSN)
       END AS "C-200d", --WPEDW_DRUG_PRIOR_APPV_RSN_CD_4
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
            WHEN    TRIM(LZ_ESI_CLM_MSTR.PHRMCY_NTWK_IND) IN ('UNK' ,'NA', '') THEN NULL
            ELSE    TRIM(LZ_ESI_CLM_MSTR.PHRMCY_NTWK_IND)
       END AS "C-203", --WPEDW_NETWK_CHOSEN_CD
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(LZ_ESI_CLM_MSTR.PRE_AUTHRZN_RSN) IN ('UNK' ,'NA', '') THEN NULL
           ELSE TRIM(LZ_ESI_CLM_MSTR.PRE_AUTHRZN_RSN)
       END AS "C-207", --WPEDW_DRUG_PRIOR_APPV_CMT_CD
       NULL AS "C-208", --WPEDW_DRUG_PRIOR_APPV_CD
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(PHRMCY_INFO.PHRMCY_CORP_ID) IN ('UNK' ,'NA', '') THEN NULL
           WHEN (    POSITION(' ' IN SUBSTR(PHRMCY_INFO.PHRMCY_CORP_ID,1,5)) > 0) 
                  OR (UPPER(SUBSTR(PHRMCY_INFO.PHRMCY_CORP_ID,1,5)) (CASESPECIFIC) <> LOWER(SUBSTR(PHRMCY_INFO.PHRMCY_CORP_ID,1,5)) (CASESPECIFIC)) 
              THEN 0
           ELSE SUBSTR(PHRMCY_INFO.PHRMCY_CORP_ID,1,5)
       END AS "C-218", --WPEDW_CHN_PHAR_NO
       --The value passed to the target is based on the business logic defined in the mapping document.
       CASE
           --If the source is empty or has the values "UNK" or "NA" an empty string is passed
           WHEN TRIM(LZ_ESI_CLM_MSTR.CLM_RCRD_SRC) IN ('UNK' ,'NA', '') THEN NULL
           WHEN UPPER(TRIM(LZ_ESI_CLM_MSTR.CLM_RCRD_SRC))    = 'E' THEN '2'
           WHEN UPPER(TRIM(LZ_ESI_CLM_MSTR.CLM_RCRD_SRC))    = 'P' AND 
                   TRIM(LZ_ESI_CLM_MSTR.CLM_PRCS_TYPE_CD) <> '3' THEN '3'
           WHEN UPPER(TRIM(LZ_ESI_CLM_MSTR.CLM_RCRD_SRC))     = 'T' THEN '3'           
           ELSE NULL
       END AS "C-226", --WPEDW_DRUG_CLM_SOURCE_CD 
       CAST (    CAST( CAST(LZ_ESI_CLM_MSTR.ADJDCTN_DT AS FORMAT 'YY') AS CHAR(2) ) 
              || LPAD( CAST( ( LZ_ESI_CLM_MSTR.ADJDCTN_DT - 
                               CAST( CAST(    EXTRACT (YEAR FROM LZ_ESI_CLM_MSTR.ADJDCTN_DT) AS CHAR(4)) || '-01-01' AS DATE) +
                               1
                             )
                       AS CHAR(3))
                 ,3,'0')
             AS DECIMAL(5,0)) AS "C-235", --WPEDW_PROCESR_BATCH_NO_DTE
       --Checking done to ensure that Batch Number has pure numeric value and passed only if true. This is because the source is a character field and the target is a decimal.
       CASE
            WHEN    (   POSITION(' ' IN SUBSTR(BATCH_NBR.BTCH_NBR,2,4)) > 0) 
                     OR (UPPER(SUBSTR(BATCH_NBR.BTCH_NBR,2,4)) (CASESPECIFIC) <> LOWER(SUBSTR(BATCH_NBR.BTCH_NBR,2,4)) (CASESPECIFIC)) 
                THEN 0
            ELSE    CAST (SUBSTR(BATCH_NBR.BTCH_NBR,2,4) AS DECIMAL (4,0))
       END AS "C-236", --WPEDW_BATCH_SEQ_NBR
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(LZ_ESI_CLM_MSTR.CLM_RCRD_SRC) IN ('UNK' ,'NA', '') THEN NULL
           ELSE TRIM(LZ_ESI_CLM_MSTR.CLM_RCRD_SRC)
       END AS "C-237", --WPEDW_CLAIM_FORM_CD
       --The value is passed based on the business logic defined in the mapping document, based on the claim type
       CASE
            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'P' THEN '1'
            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'R' THEN '4'
            WHEN    UPPER(TRIM(LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'D' THEN '1'
            ELSE    ' '
       END AS "C-238", --WPEDW_CLAIM_DISP_CD
       NULL AS "C-239", --WPEDW_ORIG_SUBMIT_GRP_NO
       LZ_ESI_CLM_MSTR.HOME_PLAN_CD AS "C-240", --WPEDW_ORIG_HOME_PLAN_CD
       LZ_ESI_CLM_MSTR.PHRMCY_NBR AS "C-242", --WPEDW_SUB_CLAIM_PHARM_NBR
       --If the claim is a reversal claim, the value is negated
       CASE
           WHEN TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'R' 
           THEN    ( -1 *  LZ_ESI_CLM_MSTR.CSTMRY_CHRG_AMT )
           ELSE LZ_ESI_CLM_MSTR.CSTMRY_CHRG_AMT
       END AS "C-243", --WPEDW_DRUG_ORIG_AMT
       --If there is a pricing amount for MAX GENERIC pricing code in the pricing table against the NDC number for the claim, use that value for the pricing amount.
       --If no pricing amount exists for that NDC number for MAX GENERIC pricing code, check for pricing amount for the AWP pricing code.
       --If there is no pricing amount found against the NDC number for the claim, pass zero.
       --If the pricing amount retrieved is within the width of the target field, pass the value.
       --If the pricing value retrieved exceeds the width of the target field, pass the max value that can be accomodated within the width of the target.
       CASE
           WHEN PRCNG_INFO_MAXGENERIC.PRICE_AMT IS NULL
               THEN
                   CASE
                       WHEN PRCNG_INFO_AWP.PRICE_AMT IS NULL THEN 0
                       ELSE
                           CASE
                               WHEN PRCNG_INFO_AWP.PRICE_AMT <= 9999.9999 THEN PRCNG_INFO_AWP.PRICE_AMT
                               ELSE
                                    CASE
                                        WHEN PRCNG_INFO_AWP.PRICE_AMT > 9999.9999 THEN 9999.9999
                                        ELSE 0
                                    END
                           END
                   END
           ELSE
               CASE
                   WHEN PRCNG_INFO_MAXGENERIC.PRICE_AMT <> 0 THEN PRCNG_INFO_MAXGENERIC.PRICE_AMT
                   ELSE
                       CASE
                           WHEN PRCNG_INFO_AWP.PRICE_AMT IS NULL THEN 0
                           ELSE
                               CASE
                                   WHEN PRCNG_INFO_AWP.PRICE_AMT <= 9999.9999 THEN PRCNG_INFO_AWP.PRICE_AMT
                                   ELSE
                                        CASE
                                            WHEN PRCNG_INFO_AWP.PRICE_AMT > 9999.9999 THEN 9999.9999
                                            ELSE 0
                                        END
                               END
                       END
               END
       END AS "C-244", --WPEDW_DRUG_UNIT_CST_AMT
       LZ_ESI_CLM_MSTR.HOME_PLAN_CD AS "C-245", --WPEDW_HOME_PLAN_CD
       --WPEDW_GEN_DRUG_CD_NO is a Drug field
       --The drug fields have a fixed hierarchy for retrieving data.
       --  1) If valid data exists in Claims Master, pass that value to the target
       -- 2) If there is no valid data in Claims Master, check whether valid value exists in FDB_NDC. If a valid value is found, pass the value to the target
       -- 3) If there is no valid data in FDB_NDC, check whether valid value exists in RX_MSTR. If a valid value is found, pass the value to the target
       CASE 
           --If the source is empty or has the values "UNK" or "NA" the next field in the hierarchy is checked for proper value
           WHEN     TRIM(SUBSTR(LZ_ESI_CLM_MSTR.GNRC_CLSFCTN_NBR,1,5)) IN ('UNK' ,'NA', '') THEN
                CASE
                    --If the source is empty or has the values "UNK" or "NA" zero is passed, else the actual value is passed to the target
                    WHEN    TRIM(NBC_INFO.GCN) IN ('UNK' ,'NA', '') THEN 0
                    ELSE
                        CASE
                            WHEN    (   POSITION(' ' IN TRIM(NBC_INFO.GCN)) > 0) 
                                     OR (UPPER(TRIM(NBC_INFO.GCN)) (CASESPECIFIC) <> LOWER(TRIM(NBC_INFO.GCN)) (CASESPECIFIC)) 
                                THEN 0
                            ELSE    CAST(TRIM(NBC_INFO.GCN) AS DECIMAL (5,0))
                        END
                END
           ELSE
                CASE
                    WHEN    (   POSITION(' ' IN SUBSTR(LZ_ESI_CLM_MSTR.GNRC_CLSFCTN_NBR,1,5)) > 0) 
                             OR (UPPER(SUBSTR(LZ_ESI_CLM_MSTR.GNRC_CLSFCTN_NBR,1,5)) (CASESPECIFIC) <> LOWER(SUBSTR(LZ_ESI_CLM_MSTR.GNRC_CLSFCTN_NBR,1,5)) (CASESPECIFIC)) 
                        THEN 0
                    ELSE    CAST(SUBSTR(LZ_ESI_CLM_MSTR.GNRC_CLSFCTN_NBR,1,5) AS DECIMAL (5,0))
                END
       END AS "C-251", --WPEDW_GEN_DRUG_CD_NO
       --The value passed to the target is based on the business logic defined for the field in the mapping document.
       CASE
            WHEN    TRIM(LZ_ESI_CLM_MSTR.DRUG_TYPE_CD) = '1' THEN 2
            WHEN    TRIM(LZ_ESI_CLM_MSTR.DRUG_TYPE_CD) = '2' THEN 2
            WHEN    TRIM(LZ_ESI_CLM_MSTR.DRUG_TYPE_CD) = '3' THEN 1
            WHEN    TRIM(LZ_ESI_CLM_MSTR.DRUG_TYPE_CD) = '4' THEN 0
            WHEN    TRIM(LZ_ESI_CLM_MSTR.DRUG_TYPE_CD) = '5' THEN 3
            ELSE    0
       END AS "C-252", --WPEDW_GEN_DRUG_PRODUCT_CD
       NULL AS "C-254", --WPEDW_PD_CLM_WARN_CD
       NULL AS "C-255", --WPEDW_DRUG_CLM_REJ_OVER_CD
       NULL AS "C-256", --WPEDW_CLM_FORCE_REJ_3_CD
       NULL AS "C-258", --WPEDW_ORIG_CLM_PAY_DTE
       NBC_INFO.SMARTKEY_ID AS "C-259", --WPEDW_SMART_KEY_FIELDS
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(LZ_ESI_CLM_MSTR.PHRMCY_TYPE_CD) IN ('UNK' ,'NA', '') THEN NULL
           ELSE TRIM(LZ_ESI_CLM_MSTR.PHRMCY_TYPE_CD)
       END AS "C-261", --WPEDW_PHARM_TYPE_CD
       CAST (CAST (LZ_ESI_CLM_MSTR.RLTNSHP_CD AS DECIMAL (1,0)) AS CHAR(1)) AS "C-262", --WPEDW_PAT_REL_CD2
       CASE
            WHEN    ( TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4)) = 'WGS' OR
                      TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4)) = 'WGS'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,1,15)
            WHEN    ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'QCAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'QCAR'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,163,7)
            WHEN    ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'STAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'STAR'
                    )
                THEN
                    CASE
                         WHEN    SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,1,3) IN ('IND', 'SNR', 'STE')
                             THEN TRIM ( TRAILING FROM ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,1,6) ||
                                                         '0000'
                                                       )
                                       )
                         ELSE    TRIM ( TRAILING FROM ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,30,6) ||
                                                        '0000'
                                                      )
                                       )
                    END
       END AS "C-264", --WPEDW_EXP_GROUP_NBR
       CASE
            WHEN    ( TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4)) = 'WGS' OR
                      TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4)) = 'WGS'
                    )
                THEN '0' || TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,59,14))
            WHEN    ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'QCAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'QCAR'
                    )
                THEN
                    CASE
                         WHEN    SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,2) IN ('32', '33', '34', '35')
                             THEN ( SUBSTR(LZ_ESI_CLM_MSTR.CLNT_CUST_ID,1,2) ||
                                    SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,1,3)
                                  )
                         ELSE    NULL
                    END
            WHEN    ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'STAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'STAR'
                    )
                THEN TRIM ( TRAILING FROM ('0' || SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,45,15)))
       END AS "C-265", --WPEDW_EXP_GROUP_SECT_NBR
       CASE
            WHEN    ( TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4)) = 'WGS' OR
                      TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4)) = 'WGS' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'QCAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'QCAR'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,30,10)
            WHEN    ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'STAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'STAR'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,1,10)
       END AS "C-266", --WPEDW_CASE_NO
       SUB_CARR_CD AS "C-270", --WPEDW_CLIENT_RPT5
       CLNT_CUST_ID AS "C-271", --WPEDW_CLIENT_RPT6
       SUBSTR(LZ_ESI_CLM_MSTR.ESI_CLNT_GNRL_PUR_AREA_CD,1,20) AS "C-272", --WPEDW_HEALTH_CARD_ID
       CASE
            WHEN    ( TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4)) = 'WGS' OR
                      TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4)) = 'WGS'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,140,8)
            WHEN    ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'QCAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'QCAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'STAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'STAR'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,154,8)
       END AS "C-273", --WPEDW_MBS1
       CASE
            WHEN    ( TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4)) = 'WGS' OR
                      TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4)) = 'WGS'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,148,4)
            WHEN    ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'QCAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'QCAR'
                    )
                THEN NULL
            WHEN    ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'STAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'STAR'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,136,4)
       END AS "C-274", --WPEDW_COMPANY_CODE
       NULL AS "C-280", --WPEDW_MEDICARE_ADMIN_FEE
       NULL AS "C-282", --WPEDW_PHAR_CLM_BAL_AMT
       NULL AS "C-285", --WPEDW_CLIENT_NETWK_CD
       LZ_ESI_CLM_MSTR.OTHR_TROOP_AMT AS "C-288", --WPEDW_OTHER_TROOP_AMT
       NULL AS "C-289", --WPEDW_TOTAL_PLRO_AMT
       LZ_ESI_CLM_MSTR.LICS_SBSDY_AMT AS "C-290", --WPEDW_LICS_SUBSIDY_AMT
       NULL AS "C-291", --WPEDW_LICS_IND
       NULL AS "C-292", --WPEDW_GROUP_PRODUCT_IND
       LZ_ESI_CLM_MSTR.CMS_CNTRCT_CD AS "C-293", --WPEDW_CONTRACT_NO
       LZ_ESI_CLM_MSTR.HIC_NBR AS "C-294", --WPEDW_HICN
       LZ_ESI_CLM_MSTR.PBP_ID AS "C-295", --WPEDW_PBP_ID
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(LZ_ESI_CLM_MSTR.CTSTRPHC_CVRG_CD) IN ('UNK' ,'NA', '') THEN NULL
           ELSE TRIM(LZ_ESI_CLM_MSTR.CTSTRPHC_CVRG_CD)
       END AS "C-296", --WPEDW_CATASTROPHIC_COV_CD
       LZ_ESI_CLM_MSTR.ADJSTD_OOP_AMT AS "C-298", --WPEDW_CLM_TROOP_AMT
       NULL AS "C-300", --WPEDW_DRUG_COV_STAT_CD
       NULL AS "C-303", --WPEDW_CLM_TOTAL_AMT
       NULL AS "C-306", --WPEDW_CLM_CATASTROPHIC_AMT
       NULL AS "C-309", --WPEDW_OTHER_CARRIER_PTD_AMT
       NULL AS "C-310", --WPEDW_NETWK_DIFF_PTD_AMT
       LZ_ESI_CLM_MSTR.CPAY_AMT AS "C-311", --WPEDW_PAT_PAY_AMT_EDT
       LZ_ESI_CLM_MSTR.GROS_DRUG_COST_ABV_OOP_AMT AS "C-315", --WPEDW_GDCA_AMT_EDT
       NULL AS "C-316", --WPEDW_PRIC_EXP_CD
       NULL AS "C-321a", --WPEDW_ORIG_PRSP_NO_QUAL
       NULL AS "C-321b", --WPEDW_ORIG_PRSP_NO_9
       NULL AS "C-321c", --WPEDW_COB_OTH_PAYER_COV_TYPE
       NULL AS "C-321d", --WPEDW_PHAR_MKUP_AMT
       NULL AS "C-321e", --WPEDW_PRSP_CARD_GRP_NO_COMB
       NULL AS "C-321f", --WPEDW_REASON_CD
       NULL AS "C-321g", --WPEDW_SUBR_SALES_TAX_AMT
       NULL AS "C-321h", --WPEDW_FLAT_SALES_TAX_SUBMIT
       NULL AS "C-321i", --WPEDW_SALES_TAX_RATE
       NULL AS "C-321j", --WPEDW_SALES_TAX_BASIS
       NULL AS "C-323a", --WPEDW_GRP_DRUG_SUSP_DTE_8
       NULL AS "C-323b", --WPEDW_EXPD_DRUG_RIDER_CD
       NULL AS "C-323c", --WPEDW_PRSP_REFILL_VAL
       RX_INFO.RX_CTGRY_CD AS "C-323d", --WPEDW_DRUG_RSTRC_CD
       NULL AS "C-323e", --WPEDW_SBMT_DRUG_INGRED_CST_A
       --If the claim is a reversal claim, the value is negated
       LZ_ESI_CLM_MSTR.CSTMRY_CHRG_AMT AS "C-323f", --WPEDW_USUAL_AND_CUST_DRUG_A
       NULL AS "C-323g", --WPEDW_SUBRPSALE_CLM_MATCHIND
       NULL AS "C-324a", --WPEDW_PRSP_CARD_CREATE_DTE_8
       NULL AS "C-324b", --WPEDW_PRSP_CARD_EXPIR_DTE_8
       NULL AS "C-324c", --WPEDW_SUBR_SPEC_DRUG_COV_IND
       SUBSTR(TRIM(WLP_MBR_CD),1,3) AS "C-324d", --WPEDW_SUBR_CONT_EXT_NO
       NULL AS "C-324e", --WPEDW_SUBR_SEX_CD
       LZ_ESI_CLM_MSTR.PAT_LAST_NM AS "C-324f", --WPEDW_DEP_LAST_NM
       SUBSTR(TRIM(LZ_ESI_CLM_MSTR.PAT_FRST_NM),1,5) AS "C-324g", --WPEDW_DEP_FIRST_NM_EXP
       --WPEDW_DRUG_GENERIC_NM is a Drug field
       --The drug fields have a fixed hierarchy for retrieving data.
       --  1) If valid data exists in Claims Master, pass that value to the target
       -- 2) If there is no valid data in Claims Master, check whether valid value exists in FDB_NDC. If a valid value is found, pass the value to the target
       -- 3) If there is no valid data in FDB_NDC, check whether valid value exists in RX_MSTR. If a valid value is found, pass the value to the target
       CASE 
           --If the source is empty or has the values "UNK" or "NA" the next field in the hierarchy is checked for proper values
           WHEN     TRIM(LZ_ESI_CLM_MSTR.INGRED_NM) IN ('UNK' ,'NA', '') THEN
                CASE
                    --If the source is empty or has the values "UNK" or "NA" the next field in the hierarchy is checked for proper values
                    WHEN    TRIM(NBC_INFO.GNRC_INGRDNT_NM) IN ('UNK' ,'NA', '') THEN
                        CASE
                            --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
                            WHEN    TRIM(RX_INFO.GNRC_INGRDNT_NM) IN ('UNK' ,'NA', '') THEN NULL
                            ELSE    SUBSTR(RX_INFO.GNRC_INGRDNT_NM,1,30)
                        END
                    ELSE    SUBSTR(NBC_INFO.GNRC_INGRDNT_NM,1,30)
                END
           ELSE     LZ_ESI_CLM_MSTR.INGRED_NM
       END AS "C-324h", --WPEDW_DRUG_GENERIC_NM
       NULL AS "C-324i", --WPEDW_DRUG_FORM_TEXT
       NULL AS "C-324j", --WPEDW_DRUG_MANUF_DSTRBUTR_NM
       NULL AS "C-324k", --WPEDW_DRUG_STD_PKG_SZ_IND
       NULL AS "C-324l", --WPEDW_DRUG_UNIT_DOSE_PKG_IND
       NBC_INFO.FORM_TYPE_CD AS "C-324m", --WPEDW_DRUG_FORM_CD
       NULL AS "C-324n", --WPEDW_DRUG_PKG_SZ_QTY
       NULL AS "C-324o", --WPEDW_DESI_DRUG_IND
       NULL AS "C-324p", --WPEDW_PRIM_CARRIER_CD
       NULL AS "C-324q", --WPEDW_DRUG_PRODUCT_OBS_DTE_8
       NULL AS "C-324r", --WPEDW_MED_COND_TEXT
       NULL AS "C-324s", --WPEDW_TRML_OPER_NO
       NULL AS "C-324t", --WPEDW_NEW_ACCUM_LOGIC_FL
       NULL AS "C-324u", --WPEDW_BRAND_DISCOUNT_PERCENT
       NULL AS "C-324v", --WPEDW_GNRC_DISCOUNT_PERCENT
       NULL AS "C-324w", --WPEDW_PHAR_PRIOR_APPV_OVR_CD
       NULL AS "C-324x", --WPEDW_PHYS_OUT_NETWORK
       NULL AS "C-324y", --WPEDW_HOLD_FROM_PAY_CD
       NULL AS "C-324z", --WPEDW_DRUG_CLM_TRANS_CD
       PHRMCY_INFO.PHRMCY_NM AS "C-324aa", --WPEDW_PHAR_DISPEN_NM
       NULL AS "C-324ab", --WPEDW_PHAR_DISPEN_STR
       NULL AS "C-324ac", --WPEDW_PHAR_DISPEN_CITY
       NULL AS "C-324ad", --WPEDW_PHAR_DISPEN_STATE
       PHRMCY_INFO.ZIP_CD AS "C-324ae", --WPEDW_PHAR_DISPEN_ZIP_CD_15
       NULL AS "C-324ag", --WPEDW_PHAR_EFF_DTE_8
       NULL AS "C-324ah", --WPEDW_PHAR_DEL_DTE_8
       NULL AS "C-324ai", --WPEDW_CENT_CLM_PROCESS_SITCD
       NULL AS "C-324aj", --WPEDW_PHAR_PROFES_FEE_IND
       NULL AS "C-324ak", --WPEDW_PHAR_FORM_REMB_IND
       LZ_ESI_CLM_MSTR.WLP_ADMIN_FEE AS "C-324al", --WPEDW_PHAR_SPEC_DISPEN_FEE_A
       NULL AS "C-324am", --WPEDW_DEP_COPAY_PERCENT
       NULL AS "C-324an", --WPEDW_REJ_OVER_RMVL_CD
       NULL AS "C-324ao", --WPEDW_ORIG_CHK_NO
       NULL AS "C-325a", --WPEDW_DED_PROCESS_SORT_SEQNO
       NULL AS "C-325b", --WPEDW_CHN_PHAR_PAYEE_ID_NO
       NULL AS "C-325c", --WPEDW_CLM_SUBMIT_CD
       NULL AS "C-325d", --WPEDW_DRUG_REC_CORR_IND
       NULL AS "C-325e", --WPEDW_DRUG_CLM_PRESORTMAILCD
       NULL AS "C-325f", --WPEDW_CLM_SORT_SEQ_NO
       NULL AS "C-325g", --WPEDW_CLM_REV_DTE_8
       NULL AS "C-326a", --WPEDW_MBR_MED_DED_AMT
       NULL AS "C-326b", --WPEDW_PAY_BRAND_PRICE_IND
       NULL AS "C-326c", --WPEDW_PLAN_ASGN_PHYS_ID_QUAL
       NULL AS "C-326d", --WPEDW_PLAN_ASGN_PHYS_ID_NO
       NULL AS "C-326e", --WPEDW_REJ_CLAIMS_ALLOWED_AMT
       NULL AS "C-326f", --WPEDW_ORNG_BK_THERAP_CD
       NULL AS "C-326g", --WPEDW_ADDL_DCN_OR_MAC_AMT
       NULL AS "C-326i", --WPEDW_MBR_MED_BEN_LMT_AMT
       NULL AS "C-326j", --WPEDW_LEASE_LINE_CHARGE_IND
       NULL AS "C-326k", --WPEDW_FDB_GNRC_DRUGPRODUCTCD
       NULL AS "C-326l", --WPEDW_GENERIC_MANUFACTURERCD
       NULL AS "C-326m", --WPEDW_GENERIC_NAME_CD
       NULL AS "C-326n", --WPEDW_GENERIC_SPREAD_CD
       NULL AS "C-326o", --WPEDW_BATCH_SEQ_ONCORRECTION
       NULL AS "C-326p", --WPEDW_IL_FORMULARY_DRUG_CD
       NULL AS "C-326q", --WPEDW_BRAND_CMPND_DISP_FEE_A
       NULL AS "C-326r", --WPEDW_GNRC_CMPND_DISP_FEE_A
       LZ_ESI_CLM_MSTR.PRSCRBR_LAST_NM AS "C-326s", --WPEDW_PHYS_LAST_NM
       LZ_ESI_CLM_MSTR.PRSCRBR_NM_FRST AS "C-326t", --WPEDW_PHYS_FIRST_NM
       NULL AS "C-326u", --WPEDW_PA_TYPE_CD
       NULL AS "C-326v", --WPEDW_PA_BEGIN_DT
       NULL AS "C-326w", --WPEDW_PA_END_DT
       NULL AS "C-326x", --WPEDW_PA_INCLUD_EXCLUD_CD
       NULL AS "C-326y", --WPEDW_PA_TYPE_FIELD
       NULL AS "C-326z", --WPEDW_PA_SCRIPTS_USED
       NULL AS "C-326aa", --WPEDW_PA_DAYS_USED
       NULL AS "C-326ab", --WPEDW_PA_UNITS_USED
       NULL AS "C-326ac", --WPEDW_PA_DOLLARS_USED
       NULL AS "C-326ad", --WPEDW_PA_USE_CAP
       NULL AS "C-326ae", --WPEDW_PA_USE_DED
       NULL AS "C-326af", --WPEDW_PA_USE_OOP
       NULL AS "C-326ag", --WPEDW_PA_COPAY_TYPE
       NULL AS "C-326ah", --WPEDW_PA_COPAY_AMT
       NULL AS "C-326ai", --WPEDW_NATL_NETWRK_EXCEPT_CD
       NULL AS "C-326aj", --WPEDW_LOCAL_EXCEPT_CD
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the source data is transformed as per the business logic defined in the mapping document.
       CASE
           WHEN TRIM(LZ_ESI_CLM_MSTR.BILLD_BSIS_CD) IN ('UNK' ,'NA', '') THEN NULL
           WHEN TRIM(LZ_ESI_CLM_MSTR.BILLD_BSIS_CD) = '00' THEN 'O'
           WHEN TRIM(LZ_ESI_CLM_MSTR.BILLD_BSIS_CD) = '01' THEN '1'
           WHEN TRIM(LZ_ESI_CLM_MSTR.BILLD_BSIS_CD) = '06' THEN '6'
           WHEN TRIM(LZ_ESI_CLM_MSTR.BILLD_BSIS_CD) = '07' THEN '7'
           WHEN TRIM(LZ_ESI_CLM_MSTR.BILLD_BSIS_CD) = '08' THEN '8'
           WHEN TRIM(LZ_ESI_CLM_MSTR.BILLD_BSIS_CD) = '09' THEN '9'
           WHEN TRIM(LZ_ESI_CLM_MSTR.BILLD_BSIS_CD) = '10' THEN ' '
           WHEN TRIM(LZ_ESI_CLM_MSTR.BILLD_BSIS_CD) = '12' THEN 'A'
           WHEN TRIM(LZ_ESI_CLM_MSTR.BILLD_BSIS_CD) = '13' THEN ' '
           WHEN TRIM(LZ_ESI_CLM_MSTR.BILLD_BSIS_CD) = '14' THEN 'Z'
           WHEN TRIM(LZ_ESI_CLM_MSTR.BILLD_BSIS_CD) = '15' THEN ' '
           ELSE NULL
       END AS "C-326ak", --WPEDW_BASIS_OF_COST_CD
       NULL AS "C-326al", --WPEDW_AWP_PHAR_AUD_PERCENT_OLD
       NULL AS "C-326am", --WPEDW_CHN_PHAR_DISPEN_FEE_A
       NULL AS "C-326an", --WPEDW_CHN_GNRC_DISPEN_FEE_A
       NULL AS "C-330a", --WPEDW_COPAYTBL_NETWK_TYP
       NULL AS "C-330b", --WPEDW_COPAYTBL_COPAY_GRP
       NULL AS "C-330c", --WPEDW_COPAYTBL_COPAY_CAT
       NULL AS "C-330d", --WPEDW_COPAYTBL_MIN_COPAY
       NULL AS "C-330e", --WPEDW_COPAYTBL_MAX_COPAY
       NULL AS "C-330f", --WPEDW_COPAYTBL_EXEMPT_LIST
       NULL AS "C-330g", --WPEDW_COPAYTBL_DAW_EXEMPT
       NULL AS "C-330h", --WPEDW_COPAYTBL_REGR_PCT_IND
       NULL AS "C-330i", --WPEDW_COPAYTBL_REGR_PCT
       NULL AS "C-330j", --WPEDW_COPAYTBL_PAY_DIFF_IND
       NULL AS "C-333a", --WPEDW_WORK_COMP_ICD9_3
       NULL AS "C-333b", --WPEDW_WORK_COMP_ICD9_PD
       NULL AS "C-333c", --WPEDW_WORK_COMP_ICD9_2
       NULL AS "C-335a", --WPEDW_ZERO_BALANCE_COPAY
       NULL AS "C-335b", --WPEDW_MAC_ONLY_GEN_DISP_FEE
       NULL AS "C-335c", --WPEDW_MAC_ADDL_PERCENT_AMT
       NULL AS "C-335d", --WPEDW_MAC_ADDL_PERCENT_PRC
       NULL AS "C-335e", --WPEDW_ANY_WILLING_PROV
       LZ_ESI_CLM_MSTR.MBR_AMT_APLYD_TO_OOP AS "C-364", --WPEDW_CONT_SATISFY_BEN_LMT_A
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(LZ_ESI_CLM_MSTR.ADJST_RJCT_CD) IN ('UNK' ,'NA', '') THEN NULL
           ELSE TRIM(LZ_ESI_CLM_MSTR.ADJST_RJCT_CD)
       END AS "C-370a", --WPEDW_PRIM_REJ_CD_1
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(LZ_ESI_CLM_MSTR.ADJST_RJCT_CD_2) IN ('UNK' ,'NA', '') THEN NULL
           ELSE TRIM(LZ_ESI_CLM_MSTR.ADJST_RJCT_CD_2)
       END AS "C-370b", --WPEDW_PRIM_REJ_CD_2
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(LZ_ESI_CLM_MSTR.ADJST_RJCT_CD_3) IN ('UNK' ,'NA', '') THEN NULL
           ELSE TRIM(LZ_ESI_CLM_MSTR.ADJST_RJCT_CD_3)
       END AS "C-370c", --WPEDW_PRIM_REJ_CD_3
       --The value passed to the target is based on the business logic defined in the mapping document for the field.
       CASE
           WHEN UPPER(TRIM(LZ_ESI_CLM_MSTR.FRMLRY_CD)) = 'F' THEN '1'
           WHEN UPPER(TRIM(LZ_ESI_CLM_MSTR.FRMLRY_CD)) = 'N' THEN '0'
           ELSE NULL
       END AS "C-378", --WPEDW_CLIENT_FORM_FORMCD
       --WPEDW_DRUG_STRENGTH_TEXT is a Drug field
       --The drug fields have a fixed hierarchy for retrieving data.
       --  1) If valid data exists in Claims Master, pass that value to the target
       -- 2) If there is no valid data in Claims Master, check whether valid value exists in FDB_NDC. If a valid value is found, pass the value to the target
       -- 3) If there is no valid data in FDB_NDC, check whether valid value exists in RX_MSTR. If a valid value is found, pass the value to the target
       CASE
           --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
           WHEN TRIM(LZ_ESI_CLM_MSTR.DRUG_STRNGTH_CD) IN ('UNK' ,'NA', '') THEN
              CASE
                 WHEN TRIM(NBC_INFO.STRNGTH_DESC) IN ('UNK' ,'NA', '') THEN CAST(CAST(RX_INFO.METRIC_STRNGTH_NBR AS DECIMAL(14,5)) AS CHAR(10))
                 ELSE SUBSTR(NBC_INFO.STRNGTH_DESC,1,10)
              END
           ELSE LZ_ESI_CLM_MSTR.DRUG_STRNGTH_CD
       END AS "C-383", --WPEDW_DRUG_STRENGTH_TEXT
       RX_INFO.RX_CTGRY_CD AS "C-385", --WPEDW_DRUG_CAT_CD
       NULL AS "C-404", --WPEDW_CLIENT_FORM_CODE1
       CASE
            WHEN    ( TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4)) = 'WGS' OR
                      TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4)) = 'WGS'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,140,8)
            WHEN    ( SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'QCAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'QCAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4) = 'STAR' OR
                      SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4) = 'STAR'
                    )
                THEN SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,154,8)
       END AS "C-413", --WPEDW_MBS_CD
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(LZ_ESI_CLM_MSTR.CVRG_STTS_CD) IN ('UNK' ,'NA', '') THEN NULL
           ELSE SUBSTR(TRIM(LZ_ESI_CLM_MSTR.CVRG_STTS_CD),2,1)
       END AS "C-421", --WPEDW_CONT_COV_CD
       NULL AS "C-429", --WPEDW_PRODUCT_ID_CD
       CAST( 
              SUBSTR(
                     CAST(
                            CAST( LZ_ESI_CLM_MSTR.BRTH_DT AS DATE FORMAT 'YYYY') 
                     AS CHAR(4) ) 
                   , 1, 2)
       AS DECIMAL(2)) AS "C-430", --WPEDW_DEP_BRTH_CC
       LZ_ESI_CLM_MSTR.ESI_ANCLRY_AMT AS "C-431", --WPEDW_GNRC_BR_VAR_COPAY_AMT
       --The value passed to the target is based on the business logic defined in the mapping document for the field.
       CASE
           WHEN NBC_INFO.GNRC_IND_CD = '1' THEN '1'
           WHEN NBC_INFO.GNRC_IND_CD = '2' THEN '2'
           WHEN NBC_INFO.GNRC_IND_CD = 'U' THEN ' '
           WHEN RX_INFO.GNRC_MULTI_SRC_CD = '1' THEN '1'
           WHEN RX_INFO.GNRC_MULTI_SRC_CD = '2' THEN '2'
           WHEN RX_INFO.GNRC_MULTI_SRC_CD = 'U' THEN ' '
           ELSE NULL
       END AS "C-432", --WPEDW_DRUG_SOURCE_CD
       LZ_ESI_CLM_MSTR.CPAY_AMT AS "C-440", --WPEDW_PAT_PAY_AMT
       --If the claim is a reversal claim, the value is negated
       CASE
           WHEN TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'R' 
               THEN ( -1 *  LZ_ESI_CLM_MSTR.CVRD_PLAN_PAYMNT_AMT )
           ELSE LZ_ESI_CLM_MSTR.CVRD_PLAN_PAYMNT_AMT
       END AS "C-441", --WPEDW_CPP_AMT
       --If the claim is a reversal claim, the value is negated
       CASE
           WHEN TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'R' 
               THEN ( -1 *  LZ_ESI_CLM_MSTR.NON_CVRD_PLAN_PAYMNT_AMT )
           ELSE LZ_ESI_CLM_MSTR.NON_CVRD_PLAN_PAYMNT_AMT
       END AS "C-442", --WPEDW_NPP_AMT
       NULL AS "C-443", --WPEDW_GDCB_AMT
       NULL AS "C-444", --WPEDW_GDCA_AMT
       NULL AS "C-445", --WPEDW_OON_CD
       LZ_ESI_CLM_MSTR.HRA_APLYD_AMT AS "C-446", --WPEDT_SPEND_ACCT_APPL_AMT
       LZ_ESI_CLM_MSTR.WLP_AMT_BILLD - LZ_ESI_CLM_MSTR.WLP_ADMIN_FEE - LZ_ESI_CLM_MSTR.HRA_APLYD_AMT AS "C-447", --WPEDT_THC_AMT
       CASE
            WHEN    ( TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,26,4)) = 'WGS' OR
                      TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,33,4)) = 'WGS'
                    )
                THEN TRIM(SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP,136,2))
            ELSE    NULL
       END AS "C-448", --WPEDT_HRA_FUND_TYPE
       LZ_ESI_CLM_MSTR.PHRMCY_NPI_ID AS "C-449", --WPEDT_PHARM_NPI_ID
       CASE
            WHEN    TRIM(LZ_ESI_CLM_MSTR.NPI_PRSCRBR_ID) IN ('UNK' ,'NA', '') THEN NULL
            ELSE    TRIM(LZ_ESI_CLM_MSTR.NPI_PRSCRBR_ID)
       END AS "C-450", --WPEDT_PHYS_NPI_ID
       SUBSTR(LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR,57,2) AS "C-451", --WPEDT_MEM_SEQ_NBR
       --If the claim is a reversal claim, the value is negated
       CASE
            WHEN TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'R'
            THEN ( -1 *  LZ_ESI_CLM_MSTR.CDHP_DDCTBL_AMT_PRIOR_TO_HRA )
            ELSE LZ_ESI_CLM_MSTR.CDHP_DDCTBL_AMT_PRIOR_TO_HRA
       END AS "C-452", --WPEDT_DED_BEFORE_HRA
       NULL AS "C-454", --WPEDW_EXT_PRODUCT
       LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_MBR AS "C-455", --WPEDW_MEMBER_MISC
       LZ_ESI_CLM_MSTR.MISC_CLNT_SPCFC_GRP AS "C-456", --WPEDW_GROUP_MISC
       LZ_ESI_CLM_MSTR.LOAD_LOG_KEY AS "3", --LOAD_LOG_KEY
       LZ_ESI_CLM_MSTR.GL_BUSINESS_UNIT AS "C-457", --GL_BUSINESS_UNIT
       LZ_ESI_CLM_MSTR.GL_MBU AS "C-458", --GL_MBU
       LZ_ESI_CLM_MSTR.GL_FUNDING_CODE_THC AS "C-459", --GL_FUNDING_CODE_THC
       LZ_ESI_CLM_MSTR.GL_FUNDING_CODE_CDH AS "C-460", --GL_FUNDING_CODE_CDH
       LZ_ESI_CLM_MSTR.GL_PRODUCT AS "C-461", --GL_PRODUCT
       LZ_ESI_CLM_MSTR.GL_LOCATION AS "C-462", --GL_LOCATION
       LZ_ESI_CLM_MSTR.GL_DETAIL_PRODUCT AS "C-463", --GL_DETAIL_PRODUCT
       LZ_ESI_CLM_MSTR.GL_AMT AS "C-464", --GL_AMOUNT
       LZ_ESI_CLM_MSTR.GL_HRA_AMT AS "C-465", --GL_HRA_AMOUNT
       LZ_ESI_CLM_MSTR.GL_STATSTCL_AMT AS "C-466", --GL_STATISTICAL_AMOUNT
       LZ_ESI_CLM_MSTR.GL_ACCNT_NBR AS "C-467", --GL_ACCOUNT_NUMBER
       LZ_ESI_CLM_MSTR.PSGL_AFFILIATE AS "C-468", --GL_AFFILIATE
       --The date default value in the source table is '8888-12-31'. This is converted to the required default '9999-12-31'
       --If the source field is empty, default value is assigned
       CASE
            WHEN    LZ_ESI_CLM_MSTR.JRNL_DT = DATE '8888-12-31' THEN DATE '9999-12-31'
            WHEN    LZ_ESI_CLM_MSTR.JRNL_DT IS NULL THEN DATE '9999-12-31'
            ELSE    LZ_ESI_CLM_MSTR.JRNL_DT
       END AS "C-469", --GL_POST_DT
       LZ_ESI_CLM_MSTR.SUB_CARR_CD AS "C-470", --ESI_DIV_CD
       LZ_ESI_CLM_MSTR.CLNT_CUST_ID AS "C-471", --ESI_PLAN_TYPE --ESI Client in Mapping document
       LZ_ESI_CLM_MSTR.GL_ACCNT_NBR_CDH AS "C-472", --GL_ACCNT_NBR_CDH
       LZ_ESI_CLM_MSTR.DLY_WKLY AS "C-473", --WPEDW_DLY_WKLY_IND
       --If the claim is a reversal claim, the value AMT_EXCEED_PER_BENE_MAX is negated. This value is reduced from MBR_AMT_COINSRN
       CASE
            WHEN TRIM( UPPER (LZ_ESI_CLM_MSTR.CLM_TYPE_CD)) = 'R'
            THEN (LZ_ESI_CLM_MSTR.MBR_AMT_COINSRN - ( -1 *  LZ_ESI_CLM_MSTR.AMT_EXCEED_PER_BENE_MAX ) )
            ELSE (LZ_ESI_CLM_MSTR.MBR_AMT_COINSRN - LZ_ESI_CLM_MSTR.AMT_EXCEED_PER_BENE_MAX)
       END AS "C-474", --WPEDW_AMT_EXCD_PER_BEN_MAX
       LZ_ESI_CLM_MSTR.VAP_CD AS "C-475", --WPEDW_VEND_AUTO_PAY_IND
       LZ_ESI_CLM_MSTR.GL_ACCNT_NBR_ADM AS "C-476", --GL_ACCNT_NBR_ADM
       LZ_ESI_CLM_MSTR.EXTNDD_RX_NBR AS "C-477", --WPEDW_EXTNDD_RX_NUM
       --If the source is empty or has the values "UNK" or "NA" an empty string is passed, else the actual value is passed to the target
       CASE
           WHEN TRIM(LZ_ESI_CLM_MSTR.PRTL_FILL_STTS_CD) IN ('UNK' ,'NA', '') THEN  NULL
           ELSE TRIM(LZ_ESI_CLM_MSTR.PRTL_FILL_STTS_CD)
       END AS "C-478", --WPEDW_PRTL_FILL_STTS_CD
       --WPEDW_DRUG_PKG_SZ_QTY_EXT is a Drug field
       --The drug fields have a fixed hierarchy for retrieving data.
       --  1) If valid data exists in Claims Master, pass that value to the target
       -- 2) If there is no valid data in Claims Master, check whether valid value exists in FDB_NDC. If a valid value is found, pass the value to the target
       -- 3) If there is no valid data in FDB_NDC, check whether valid value exists in RX_MSTR. If a valid value is found, pass the value to the target
       CASE
            WHEN    NBC_INFO.PKG_SIZE_NBR IS NULL OR NBC_INFO.PKG_SIZE_NBR = 0 THEN RX_INFO.PKG_SIZE_NBR
            ELSE    NBC_INFO.PKG_SIZE_NBR
       END AS "C-479", --WPEDW_DRUG_PKG_SZ_QTY_EXT
       LZ_ESI_CLM_MSTR.INGRED_COST_MRGN AS "C-480", --WPEDW_INGRED_COST_MRGN
       LZ_ESI_CLM_MSTR.DSPNSG_FEE_MRGN AS "C-481", --WPEDW_DSPNSG_FEE_MRGN
       LZ_ESI_CLM_MSTR.ADMIN_FEE_MRGN AS "C-482", --WPEDW_ADMIN_FEE_MRGN
       LZ_ESI_CLM_MSTR.AMT_BILLD_MRGN AS "C-483", --WPEDW_AMT_BILLD_MRGN
       LZ_ESI_CLM_MSTR.WLP_PHYS_IO_NTW_IND AS "C-484" --WLP_PHYS_IO_NTW_IND, WPEDW-PHYS-IO-NETW-IND
FROM $DB_ETL_VIEWS_ESI.${TBL_NM} AS LZ_ESI_CLM_MSTR
--Joined with the FDB_NDC data to retrieve drug data
--The below derived table retrieves drug related data from the FDB_NBC table from the RX region
LEFT OUTER JOIN
      ( SELECT DISTINCT AAA.NDC AS NDC,   
               AAA.LABEL_NM AS LABEL_NM, 
               AAA.GNRC_IND_CD AS GNRC_IND_CD,
               AAA.THRPTC_SPCFC_CLASS_CD,
               AAA.THRPTC_AHFS_CLASS_CD,
               AAA.PKG_UOM_CD,
               AAA.SMARTKEY_ID,
               AAA.GCN,
               AAA.GNRC_INGRDNT_NM,
               AAA.PKG_SIZE_NBR,
               AAA.RX_OTC_CD,
               BBB.STRNGTH_DESC,
               AAA.FORM_TYPE_CD
          FROM (      SELECT BB.NDC AS NDC,  
                             BB.LABEL_NM AS LABEL_NM, 
                             BB.MNFCTRR_NM AS MNFCTRR_NM, 
                             BB.PKG_SIZE_NBR AS PKG_SIZE_NBR, 
                             BB.SMARTKEY_ID AS SMARTKEY_ID,
                             BB.GNRC_IND_CD AS GNRC_IND_CD, 
                             BB.MNTNC_DRUG_IND AS MNTNC_DRUG_IND, 
                             BB.THRPTC_AHFS_CLASS_CD AS THRPTC_AHFS_CLASS_CD, 
                             BB.DESI_IND AS DESI_IND, 
                             BB.RX_CTGRY_CD AS RX_CTGRY_CD, 
                             BB.RX_OTC_CD AS RX_OTC_CD, 
                             BB.THRPTC_SPCFC_CLASS_CD AS THRPTC_SPCFC_CLASS_CD,
                             BB.PKG_UOM_CD AS PKG_UOM_CD,
                             BB.GCN AS GCN,
                             BB.GNRC_INGRDNT_NM AS GNRC_INGRDNT_NM,
                             BB.FORM_TYPE_CD AS FORM_TYPE_CD
                        FROM $DB_EDLRX.LOAD_LOG  AS AA      
                  INNER JOIN $DB_EDLRX.FDB_NDC AS BB
                          ON AA.LOAD_LOG_KEY = BB.LOAD_LOG_KEY
                    AND AA.PUBLISH_IND = 'Y'
                  INNER JOIN (     SELECT A.NDC,
                                          MAX(B.LOAD_END_TMS) AS  LOAD_END_TMS
                                     FROM $DB_EDLRX.FDB_NDC AS A
                               INNER JOIN $DB_EDLRX.LOAD_LOG AS B
                                       ON A.LOAD_LOG_KEY = B.LOAD_LOG_KEY
                                AND B.PUBLISH_IND = 'Y'
                                 GROUP BY (A.NDC)
                             ) CC 
                          ON AA.LOAD_END_TMS = CC.LOAD_END_TMS
                         AND BB.NDC = CC.NDC

               ) AS AAA
         LEFT OUTER JOIN (     SELECT EE.STRNGTH_DESC AS STRNGTH_DESC,
                                      EE.SMARTKEY_ID
                                 FROM $DB_EDLRX.LOAD_LOG  AS DD
                           INNER JOIN $DB_EDLRX.FDB_SMARTKEY AS EE
                                   ON EE.LOAD_LOG_KEY = DD.LOAD_LOG_KEY
                                  AND DD.PUBLISH_IND = 'Y'
                           INNER JOIN (     SELECT D.SMARTKEY_ID,
                                                   MAX(E.LOAD_END_TMS) AS  LOAD_END_TMS
                                              FROM $DB_EDLRX.FDB_SMARTKEY AS D
                                        INNER JOIN $DB_EDLRX.LOAD_LOG AS E
                                                ON D.LOAD_LOG_KEY = E.LOAD_LOG_KEY
                                               AND E.PUBLISH_IND = 'Y'
                                          GROUP BY (D.SMARTKEY_ID)
                                      ) FF
                                   ON DD.LOAD_END_TMS = FF.LOAD_END_TMS
                                  AND EE.SMARTKEY_ID = FF.SMARTKEY_ID
                                ) AS BBB
                      ON AAA.SMARTKEY_ID = BBB.SMARTKEY_ID
                      QUALIFY ROW_NUMBER() OVER (PARTITION BY AAA.NDC ORDER BY AAA.NDC ) = 1
        ) AS NBC_INFO
    ON NBC_INFO.NDC = LZ_ESI_CLM_MSTR.NDC_NBR
--Joined with the RX_MSTR data to retrieve drug data
--The below derived table retrieves drug related data from the RX_MSTR table from the RX region
LEFT OUTER JOIN 
        (    SELECT DISTINCT BB.NDC AS NDC,
                    BB.RX_CTGRY_CD AS RX_CTGRY_CD,
                    BB.THRPTC_AHFS_CLASS_CD AS THRPTC_AHFS_CLASS_CD,
                    BB.LABEL_NM AS LABEL_NM,
                    BB.PKG_UOM_CD AS PKG_UOM_CD,
                    BB.GPI AS GPI,
                    BB.GNRC_INGRDNT_NM AS GNRC_INGRDNT_NM,
                    BB.PKG_SIZE_NBR AS PKG_SIZE_NBR,
                    BB.METRIC_STRNGTH_NBR AS METRIC_STRNGTH_NBR,
                    BB.GNRC_MULTI_SRC_CD AS GNRC_MULTI_SRC_CD,
                    BB.RX_OTC_CD AS RX_OTC_CD
               FROM $DB_EDLRX.LOAD_LOG  AA
         INNER JOIN $DB_EDLRX.RX_MSTR BB
                 ON AA.LOAD_LOG_KEY = BB.LOAD_LOG_KEY
                AND AA.PUBLISH_IND = 'Y'
         INNER JOIN (    SELECT A.NDC,
                                MAX(B.LOAD_END_TMS) AS  LOAD_END_TMS
                           FROM $DB_EDLRX.RX_MSTR  A    
                     INNER JOIN $DB_EDLRX.LOAD_LOG B
                             ON A.LOAD_LOG_KEY = B.LOAD_LOG_KEY 
                            AND B.PUBLISH_IND = 'Y'
                       GROUP BY (A.NDC)
                    ) CC 
                 ON AA.LOAD_END_TMS = CC.LOAD_END_TMS
                AND BB.NDC = CC.NDC
                QUALIFY ROW_NUMBER() OVER (PARTITION BY BB.NDC ORDER BY BB.NDC ) = 1
        ) AS RX_INFO
    ON RX_INFO.NDC = LZ_ESI_CLM_MSTR.NDC_NBR
--Joined with the pharmacy master to retrieve pharmacy data
--The below derived table retrieves pharmacy related data from the Pharamcy table from the landing zone
LEFT OUTER JOIN
        (   SELECT DISTINCT BB.PHRMCY_NBR AS PHRMCY_NBR,
                   BB.PHRMCY_NM AS PHRMCY_NM, 
                   BB.PHRMCY_ADRS_TXT AS PHRMCY_ADRS_TXT, 
                   BB.PHRMCY_CORP_ID AS PHRMCY_CORP_ID, 
                   BB.PHRMCY_ZIP_CD AS ZIP_CD,
                   BB.PHRMCY_LCTN_ST_CD AS PHRMCY_LCTN_ST_CD,
                   BB.PHRMCY_LCTN_CITY_NM AS PHRMCY_LCTN_CITY_NM
              FROM $DB_ETL_VIEWS_ESI.$TGT_LOAD_LOG AA
        INNER JOIN $DB_ETL_VIEWS_ESI.${PHRMCY_TBL_NM} BB
                ON AA.LOAD_LOG_KEY = BB.LOAD_LOG_KEY 
               AND AA.PBLSH_IND = 'Y'
        INNER JOIN (    SELECT A.PHRMCY_NBR,
                               MAX(B.LOAD_END_DTM) AS LOAD_END_DTM
                          FROM $DB_ETL_VIEWS_ESI.${PHRMCY_TBL_NM} A
                    INNER JOIN $DB_ETL_VIEWS_ESI.$TGT_LOAD_LOG B 
                            ON A.LOAD_LOG_KEY =  B.LOAD_LOG_KEY 
                           AND B.PBLSH_IND = 'Y'
                      GROUP BY A.PHRMCY_NBR
                   )CC  
               ON AA.LOAD_END_DTM = CC.LOAD_END_DTM 
              AND BB.PHRMCY_NBR = CC.PHRMCY_NBR
              QUALIFY ROW_NUMBER() OVER (PARTITION BY BB.PHRMCY_NBR ORDER BY BB.PHRMCY_NBR ) = 1    
         ) AS PHRMCY_INFO
    ON PHRMCY_INFO.PHRMCY_NBR = LZ_ESI_CLM_MSTR.PHRMCY_NBR
--Joined with the RX_PRCG table to retrieve pricing information for the pricing type code "AWP"
--The below derived table retrieves pricing information from the Pricing table from the RX region
LEFT OUTER JOIN
    (     SELECT DISTINCT PRICING_TABLE.NDC,
                 PRICE_AMT
            FROM $DB_EDLRX.$PRICING_TABLE AS PRICING_TABLE
      INNER JOIN (     SELECT MAX_PUBLISH_DT.NDC AS NDC,
                              MAX_PUBLISH_DT.PRICE_TYPE_CD AS PRICE_TYPE_CD,
                              MAX_PUBLISH_DT.UNIT_PKG_IND AS UNIT_PKG_IND,
                              MAX_PUBLISH_DT.PRICE_SRC_CD AS PRICE_SRC_CD,
                              MAX_PUBLISH_DT.MAX_PUBLISH_DT AS MAX_PUBLISH_DT,
                              MAX(EFCTV_DT) AS MAX_EFCTV_DT
                         FROM $DB_EDLRX.$PRICING_TABLE AS RX_PRCG
                   INNER JOIN (   SELECT NDC,
                                         PRICE_TYPE_CD,
                                         UNIT_PKG_IND,
                                         PRICE_SRC_CD,
                                         MAX(PUBLISH_DT) AS MAX_PUBLISH_DT
                                    FROM $DB_EDLRX.$PRICING_TABLE
                                GROUP BY NDC,
                                         PRICE_TYPE_CD,
                                         UNIT_PKG_IND,
                                         PRICE_SRC_CD
                              ) AS MAX_PUBLISH_DT
                           ON MAX_PUBLISH_DT.NDC = RX_PRCG.NDC
                          AND MAX_PUBLISH_DT.MAX_PUBLISH_DT = RX_PRCG.PUBLISH_DT
                          AND MAX_PUBLISH_DT.PRICE_TYPE_CD = RX_PRCG.PRICE_TYPE_CD
                          AND MAX_PUBLISH_DT.UNIT_PKG_IND = RX_PRCG.UNIT_PKG_IND
                          AND MAX_PUBLISH_DT.PRICE_SRC_CD = RX_PRCG.PRICE_SRC_CD
                     GROUP BY MAX_PUBLISH_DT.NDC,
                              MAX_PUBLISH_DT.PRICE_TYPE_CD,
                              MAX_PUBLISH_DT.UNIT_PKG_IND,
                              MAX_PUBLISH_DT.PRICE_SRC_CD,
                              MAX_PUBLISH_DT.MAX_PUBLISH_DT
                 ) AS MAX_DATES
              ON PRICING_TABLE.NDC = MAX_DATES.NDC
             AND PRICING_TABLE.PUBLISH_DT = MAX_DATES.MAX_PUBLISH_DT
             AND PRICING_TABLE.EFCTV_DT = MAX_DATES.MAX_EFCTV_DT
             AND PRICING_TABLE.PRICE_TYPE_CD = MAX_DATES.PRICE_TYPE_CD
             AND PRICING_TABLE.UNIT_PKG_IND = MAX_DATES.UNIT_PKG_IND
             AND PRICING_TABLE.PRICE_SRC_CD = MAX_DATES.PRICE_SRC_CD
           WHERE PRICING_TABLE.PRICE_TYPE_CD = 'AWP'
             AND PRICING_TABLE.UNIT_PKG_IND = 'U'
             AND PRICING_TABLE.PRICE_SRC_CD = 'FDB'
             QUALIFY ROW_NUMBER() OVER (PARTITION BY PRICING_TABLE.NDC ORDER BY PRICING_TABLE.NDC ) = 1
    ) AS PRCNG_INFO_AWP
    ON PRCNG_INFO_AWP.NDC = LZ_ESI_CLM_MSTR.NDC_NBR
--Joined with the RX_PRCG table to retrieve pricing information for the pricing type code "MAX GENERIC"
--The below derived table retrieves pricing information from the Pricing table from the RX region
LEFT OUTER JOIN
    (     SELECT DISTINCT PRICING_TABLE.NDC,
                 PRICE_AMT
            FROM $DB_EDLRX.$PRICING_TABLE AS PRICING_TABLE
      INNER JOIN (     SELECT MAX_PUBLISH_DT.NDC AS NDC,
                              MAX_PUBLISH_DT.PRICE_TYPE_CD AS PRICE_TYPE_CD,
                              MAX_PUBLISH_DT.UNIT_PKG_IND AS UNIT_PKG_IND,
                              MAX_PUBLISH_DT.PRICE_SRC_CD AS PRICE_SRC_CD,
                              MAX_PUBLISH_DT.MAX_PUBLISH_DT AS MAX_PUBLISH_DT,
                              MAX(EFCTV_DT) AS MAX_EFCTV_DT
                         FROM $DB_EDLRX.$PRICING_TABLE AS RX_PRCG
                   INNER JOIN (   SELECT NDC,
                                         PRICE_TYPE_CD,
                                         UNIT_PKG_IND,
                                         PRICE_SRC_CD,
                                         MAX(PUBLISH_DT) AS MAX_PUBLISH_DT
                                    FROM $DB_EDLRX.$PRICING_TABLE
                                GROUP BY NDC,
                                         PRICE_TYPE_CD,
                                         UNIT_PKG_IND,
                                         PRICE_SRC_CD
                              ) AS MAX_PUBLISH_DT
                           ON MAX_PUBLISH_DT.NDC = RX_PRCG.NDC
                          AND MAX_PUBLISH_DT.MAX_PUBLISH_DT = RX_PRCG.PUBLISH_DT
                          AND MAX_PUBLISH_DT.PRICE_TYPE_CD = RX_PRCG.PRICE_TYPE_CD
                          AND MAX_PUBLISH_DT.UNIT_PKG_IND = RX_PRCG.UNIT_PKG_IND
                          AND MAX_PUBLISH_DT.PRICE_SRC_CD = RX_PRCG.PRICE_SRC_CD
                     GROUP BY MAX_PUBLISH_DT.NDC,
                              MAX_PUBLISH_DT.PRICE_TYPE_CD,
                              MAX_PUBLISH_DT.UNIT_PKG_IND,
                              MAX_PUBLISH_DT.PRICE_SRC_CD,
                              MAX_PUBLISH_DT.MAX_PUBLISH_DT
                 ) AS MAX_DATES
              ON PRICING_TABLE.NDC = MAX_DATES.NDC
             AND PRICING_TABLE.PUBLISH_DT = MAX_DATES.MAX_PUBLISH_DT
             AND PRICING_TABLE.EFCTV_DT = MAX_DATES.MAX_EFCTV_DT
             AND PRICING_TABLE.PRICE_TYPE_CD = MAX_DATES.PRICE_TYPE_CD
             AND PRICING_TABLE.UNIT_PKG_IND = MAX_DATES.UNIT_PKG_IND
             AND PRICING_TABLE.PRICE_SRC_CD = MAX_DATES.PRICE_SRC_CD
           WHERE PRICING_TABLE.PRICE_TYPE_CD = 'MAXGENERIC'
             AND PRICING_TABLE.UNIT_PKG_IND = 'U'
             AND PRICING_TABLE.PRICE_SRC_CD = 'FDB'
             QUALIFY ROW_NUMBER() OVER (PARTITION BY PRICING_TABLE.NDC ORDER BY PRICING_TABLE.NDC ) = 1
    ) AS PRCNG_INFO_MAXGENERIC
    ON PRCNG_INFO_MAXGENERIC.NDC = LZ_ESI_CLM_MSTR.NDC_NBR
--Joined the batch number derived table to retieve unique batch number from claims master
--The below derived table retrieves UNIQUE batch number from the Claims master.
--Batch number would be avialable only for Weekly claims. Hence the logic used below to ensure we get a blank row even if only Daily claims exist for the run.
CROSS JOIN
    (
     SELECT MAX(FINAL_QRY.BATCH_NBR) AS BTCH_NBR
     FROM ( SELECT CASE 
                       WHEN COUNT_QRY.ROW_COUNT = 0 THEN CAST(' ' AS CHAR(5))
                   END AS BATCH_NBR
             FROM ( SELECT COUNT(*) AS ROW_COUNT
                      FROM (
                               SELECT BTCH_NBR AS BATCH_NBR
                                 FROM $DB_ETL_VIEWS_ESI.${TBL_NM} AS LZ_ESI_CLM_MSTR
                                WHERE DLY_WKLY  = 'W'
                                  AND LOAD_LOG_KEY IN (SELECT   ESI_LOAD_LOG_KEY
                                                         FROM   $DB_ETL_VIEWS_ESI.$TGT_LOAD_LOG_LKUP
                                                        WHERE   XTRCT_LOAD_LOG_KEY IN (  SEL LOAD_LOG_KEY
                                                                                        FROM $DB_ETL_VIEWS_ESI.$TGT_LOAD_LOG
                                                                                       WHERE WORK_FLOW_NM ='$WORK_FLOW_NM'
                                                                                         AND LOAD_END_DTM = (  SEL MAX(LOAD_END_DTM)
                                                                                                              FROM $DB_ETL_VIEWS_ESI.$TGT_LOAD_LOG
                                                                                                             WHERE WORK_FLOW_NM='$WORK_FLOW_NM'
                                                                                                               AND PBLSH_IND='N'
                                                                                                            )
                                                                                         AND PBLSH_IND='N'
                                                                                                                                                          )
                                                      )
                            ) AS INNER_QRY
                  ) COUNT_QRY
           UNION
           SELECT BATCH_QRY.BATCH_NBR
             FROM ( SELECT TOP 1 BTCH_NBR AS BATCH_NBR
                      FROM $DB_ETL_VIEWS_ESI.${TBL_NM} AS LZ_ESI_CLM_MSTR
                     WHERE DLY_WKLY = 'W'
                       AND LOAD_LOG_KEY IN ( SELECT   ESI_LOAD_LOG_KEY
                                               FROM   $DB_ETL_VIEWS_ESI.$TGT_LOAD_LOG_LKUP
                                              WHERE   XTRCT_LOAD_LOG_KEY IN (  SEL LOAD_LOG_KEY
                                                                              FROM $DB_ETL_VIEWS_ESI.$TGT_LOAD_LOG
                                                                             WHERE WORK_FLOW_NM ='$WORK_FLOW_NM'
                                                                               AND LOAD_END_DTM = (  SEL MAX(LOAD_END_DTM)
                                                                                                    FROM $DB_ETL_VIEWS_ESI.$TGT_LOAD_LOG
                                                                                                   WHERE WORK_FLOW_NM='$WORK_FLOW_NM'
                                                                                                     AND PBLSH_IND='N'
                                                                                                  )
                                                                               AND PBLSH_IND='N'
                                                                            )
                                          )
                  ) AS BATCH_QRY
          ) AS FINAL_QRY
    ) AS BATCH_NBR
WHERE LZ_ESI_CLM_MSTR.LOAD_LOG_KEY IN  
      (SELECT    ESI_LOAD_LOG_KEY
         FROM    $DB_ETL_VIEWS_ESI.$TGT_LOAD_LOG_LKUP
        WHERE    XTRCT_LOAD_LOG_KEY IN (  SELECT LOAD_LOG_KEY
                                           FROM $DB_ETL_VIEWS_ESI.$TGT_LOAD_LOG
                                          WHERE WORK_FLOW_NM ='$WORK_FLOW_NM'
                                            AND LOAD_END_DTM = (  SELECT MAX(LOAD_END_DTM)
                                                                    FROM $DB_ETL_VIEWS_ESI.$TGT_LOAD_LOG
                                                                   WHERE WORK_FLOW_NM='$WORK_FLOW_NM'
                                                                     AND PBLSH_IND='N'
                                                               )
                                            AND PBLSH_IND='N')
       )
   AND "1" IN ('WGS', 'STAR', 'QCAR');



--========================== Error Handling=====================================
    .IF ERRORCODE <> 0 THEN .GOTO ERRORS
--========================== Error Handling=====================================
ET;

/*============================================================================*/
/* COLLECT STATISTICS ON PRCS1_XTRCT table                             */
/*============================================================================*/
call APPLPROC_NOPHI_ENT.RFRSH_TBL_STTSTCS('${ETL_TEMP_ESI}','PRCS1_XTRCT','N');
--===========================End Transaction====================================

    .QUIT 0
    .LABEL ERRORS

    .QUIT ERRORCODE

    EOF

#============================================================================*/
# show AIX return code and exit with it                                      */
#============================================================================*/


exit $RETURN_CODE

#******************************************************************************/
#/*  END OF bteq_LZ_PRCS1_XTRCT_LOAD.sh*/
#******************************************************************************/
